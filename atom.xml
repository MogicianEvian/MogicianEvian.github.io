<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>OBlack&#39;s Blog - So Naive</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-14T13:16:19.370Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>OBlack</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CTSC2018 混合果汁（整体二分+线段树）</title>
    <link href="http://yoursite.com/2018/09/14/CTSC2018-%E6%B7%B7%E5%90%88%E6%9E%9C%E6%B1%81%EF%BC%88%E6%95%B4%E4%BD%93%E4%BA%8C%E5%88%86-%E7%BA%BF%E6%AE%B5%E6%A0%91%EF%BC%89/"/>
    <id>http://yoursite.com/2018/09/14/CTSC2018-混合果汁（整体二分-线段树）/</id>
    <published>2018-09-14T12:52:02.000Z</published>
    <updated>2018-09-14T13:16:19.370Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>小 R 热衷于做黑暗料理，尤其是混合果汁。</p><p>商店里有 $n$ 种果汁，编号为 $0, 1, 2, . . . , n − 1$。$i$ 号果汁的美味度是 $d_i$，每升价格为 $p_i$。小 R 在制作混合果汁时，还有一些特殊的规定，即在一瓶混合果汁中，$i$ 号果汁最多只能添加 $l_i$ 升。</p><p>现在有 $m$ 个小朋友过来找小 R 要混合果汁喝，他们都希望小 R 用商店里的果汁制作成一瓶混合果汁。其中，第 $j$ 个小朋友希望他得到的混合果汁总价格不大于 $g_j$，体积不小于 $L_j$。在上述这些限制条件下，小朋友们还希望混合果汁的美味度尽可能地高，一瓶混合果汁的美味度等于所有参与混合的果汁的美味度的最小值。请你计算每个小朋友能喝到的最美味的混合果汁的美味度。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入第一行包含两个正整数 $n, m$，表示果汁的种数和小朋友的数量。接下来 $n$ 行，每行三个正整数 $d_i, p_i, l_i$，表示 $i$ 号果汁的美味度为 $d_i$，每升价格为$p_i$，在一瓶果汁中的添加上限为 $l_i$。</p><p>接下来 $m$ 行依次描述所有小朋友：每行两个数正整数 $g_j, L_j$ 描述一个小朋友，表示他最多能支付 $g_j$ 元钱，他想要至少 $L_j$ 升果汁。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>对于所有小朋友依次输出：对于每个小朋友，输出一行，包含一个整数，表示他能喝到的最美味的混合果汁的美味度。如果无法满足他的需求，则输出 $−1$。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">3 4</span><br><span class="line">1 3 5</span><br><span class="line">2 1 3</span><br><span class="line">3 2 5</span><br><span class="line">6 3</span><br><span class="line">5 3</span><br><span class="line">10 10</span><br><span class="line">20 10</span><br></pre></td></tr></table></figure><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">2</span><br><span class="line">-1</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h4 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h4><p>对于所有的测试数据，保证 $n, m \le 100000$，$1 \le d_i, p_i, l_i \le 10^5，1 \le g_j, L_j \le 10^{18}$。</p><table><thead><tr><th style="text-align:center">测试点编号</th><th style="text-align:center">$n=$</th><th style="text-align:center">$m=$</th><th style="text-align:center">其他限制</th></tr></thead><tbody><tr><td style="text-align:center">$1,2,3$</td><td style="text-align:center">$10$</td><td style="text-align:center">$10$</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center">$4,5,6$</td><td style="text-align:center">$500$</td><td style="text-align:center">$500$</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center">$7,8,9$</td><td style="text-align:center">$5000$</td><td style="text-align:center">$5000$</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center">$10,11,12$</td><td style="text-align:center">$100000$</td><td style="text-align:center">$100000$</td><td style="text-align:center">$p_i=1$</td></tr><tr><td style="text-align:center">$13,14,15$</td><td style="text-align:center">$100000$</td><td style="text-align:center">$100000$</td><td style="text-align:center">$l_i=1$</td></tr><tr><td style="text-align:center">$16,17,18,19,20$</td><td style="text-align:center">$100000$</td><td style="text-align:center">$100000$</td><td style="text-align:center">无</td></tr></tbody></table><hr><p>容易想到对询问二分答案，那么只能选择美味度大于 $mid$  的果汁，然后就贪心的选便宜的就行了，这个贪心可以用线段树完成，按价格建线段树，然后记录每个价格的可用体积，查询就在线段树上二分即可得到最低价格</p><p>处理多次询问考虑整体二分，这里跟 $Meteors$ 那题很像，整体二分过程中维护一颗全局线段树就行了</p><p>复杂度 $O(n\log^2n)$</p><hr><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*p1,*p2;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC (p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,1,1&lt;&lt;20,stdin),p1==p2)?0:*p1++)</span></span><br><span class="line"><span class="keyword">inline</span> ll _R()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span> t=GC;ll x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(t&lt;<span class="number">48</span>||t&gt;<span class="number">57</span>)t=GC;</span><br><span class="line">    <span class="keyword">for</span>(;t&gt;<span class="number">47</span>&amp;&amp;t&lt;<span class="number">58</span>;t=GC)x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+t<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">juice</span>&#123;</span>ll p,l;<span class="keyword">int</span> d;&#125;A[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">query</span>&#123;</span>ll g,l;<span class="keyword">int</span> id;&#125;Q[N],q[N];</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(juice a,juice b)&#123;<span class="keyword">return</span> a.d&gt;b.d;&#125;</span><br><span class="line"><span class="keyword">int</span> n,m,Ans[N],cur;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    node *ls,*rs;</span><br><span class="line">    ll suml,sump;</span><br><span class="line">&#125;seg[N&lt;&lt;<span class="number">1</span>],*rt,*tl,*null;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rt=tl=null=seg;</span><br><span class="line">    null-&gt;ls=null-&gt;rs=null;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(node *&amp;p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p=++tl;p-&gt;ls=p-&gt;rs=null;</span><br><span class="line">    <span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(p-&gt;ls,l,mid);</span><br><span class="line">    build(p-&gt;rs,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(node *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node *l=p-&gt;ls,*r=p-&gt;rs;</span><br><span class="line">    p-&gt;sump=l-&gt;sump+r-&gt;sump;</span><br><span class="line">    p-&gt;suml=l-&gt;suml+r-&gt;suml;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(node *p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k,ll d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;p-&gt;suml+=d;p-&gt;sump=p-&gt;suml*l;<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(k&lt;=mid)modify(p-&gt;ls,l,mid,k,d);</span><br><span class="line">    <span class="keyword">else</span> modify(p-&gt;rs,mid+<span class="number">1</span>,r,k,d);</span><br><span class="line">    update(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">getmin</span><span class="params">(node *p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,ll d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(d==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)<span class="keyword">return</span> d*l;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;ls-&gt;suml&gt;=d)<span class="keyword">return</span> getmin(p-&gt;ls,l,mid,d);</span><br><span class="line">    <span class="keyword">return</span> p-&gt;ls-&gt;sump+getmin(p-&gt;rs,mid+<span class="number">1</span>,r,d-p-&gt;ls-&gt;suml);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> ql,<span class="keyword">int</span> qr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ql&gt;qr)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r&amp;&amp;r!=n)&#123;<span class="keyword">for</span>(<span class="keyword">int</span> i=ql;i&lt;=qr;i++)Ans[Q[i].id]=A[l].d;<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>,pl=ql<span class="number">-1</span>,pr=qr+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(cur&lt;mid)cur++,modify(rt,<span class="number">1</span>,<span class="number">1e5</span>,A[cur].p,A[cur].l);</span><br><span class="line">    <span class="keyword">while</span>(cur&gt;mid)modify(rt,<span class="number">1</span>,<span class="number">1e5</span>,A[cur].p,-A[cur].l),cur--;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=ql;i&lt;=qr;i++)q[i]=Q[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=ql;i&lt;=qr;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(q[i].l&gt;rt-&gt;suml)Q[--pr]=q[i];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(getmin(rt,<span class="number">1</span>,<span class="number">1e5</span>,q[i].l)&lt;=q[i].g)Q[++pl]=q[i];</span><br><span class="line">        <span class="keyword">else</span> Q[--pr]=q[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=ql;i&lt;=pl;i++)Ans[Q[i].id]=A[l].d;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=pr;i&lt;=qr;i++)Ans[Q[i].id]=<span class="number">-1</span>;<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    solve(l,mid,ql,pl);solve(mid+<span class="number">1</span>,r,pr,qr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,k,x,y,z;</span><br><span class="line">    n=_R();m=_R();</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)A[i].d=_R(),A[i].p=_R(),A[i].l=_R();</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)Q[i].g=_R(),Q[i].l=_R(),Q[i].id=i;</span><br><span class="line">    sort(A+<span class="number">1</span>,A+n+<span class="number">1</span>);</span><br><span class="line">    Init();build(rt,<span class="number">1</span>,<span class="number">1e5</span>);</span><br><span class="line">    solve(<span class="number">1</span>,n,<span class="number">1</span>,m);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Ans[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h4&gt;&lt;p&gt;小 R 热衷于做黑暗料理，尤其是混合果汁。&lt;/p&gt;
&lt;p&gt;商店里有 $n$ 种果汁，编号为 $0, 1, 2, . . . 
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="线段树" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="分治法" scheme="http://yoursite.com/categories/%E5%88%86%E6%B2%BB%E6%B3%95/"/>
    
      <category term="整体二分" scheme="http://yoursite.com/categories/%E5%88%86%E6%B2%BB%E6%B3%95/%E6%95%B4%E4%BD%93%E4%BA%8C%E5%88%86/"/>
    
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="整体二分" scheme="http://yoursite.com/tags/%E6%95%B4%E4%BD%93%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>「LibreOJ β Round」ZQC 的手办（线段树+堆）</title>
    <link href="http://yoursite.com/2018/09/14/%E3%80%8CLibreOJ-%CE%B2-Round%E3%80%8DZQC-%E7%9A%84%E6%89%8B%E5%8A%9E%EF%BC%88%E7%BA%BF%E6%AE%B5%E6%A0%91-%E5%A0%86%EF%BC%89/"/>
    <id>http://yoursite.com/2018/09/14/「LibreOJ-β-Round」ZQC-的手办（线段树-堆）/</id>
    <published>2018-09-14T12:29:00.000Z</published>
    <updated>2018-09-14T12:50:16.365Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>众所周知，ZQC 是个很喜欢收纳手办的大佬，他平时在写题前会先扫视一下桌面上排开的小姐姐们以获取灵感。假设他有 $ n(1 \leq n \leq 5\times 10 ^ 5) $ 个手办，小手办们排成一排，每个手办按照入手批次从第 $ 1 $ 个到第 $ n $ 个被贴上了一个标号 $ a_i(1 \leq a_i \leq 10 ^ 9) $。有两个熊孩子到 ZQC 家里玩，熊孩子 A 不断地改掉标签并不停地提问熊孩子 B。由于熊孩子 B 太笨，经常回答不上来，熊孩子 A 表示很生气，ZQC 为了世界和平（把熊孩子哄高兴好让它们帮忙把标签贴回去），大发慈悲地帮助熊孩子 B 回答一系列问题。假设一共 $ m(1 \leq m \leq 5\times 10 ^ 5) $ 次操作，两种操作分别为：</p><ul><li>$ \texttt{1 a b k} $ 将数列 $ [a, b] $ 这个区间中所有比 $ k(1 \leq k \leq 10 ^ 9) $ 小的数改为 $ k $；</li><li>$ \texttt{2 a b k x} $ 查询 $ [a, b] $ 的区间中比 $ k(1 \leq k \leq 10 ^ 9) $ 小的最小的 $ x(1 \leq x \leq 10^5) $ 个数。</li></ul><p>ZQC 最后成功维护了世界正义，请在每次查询时输出熊孩子 A 所要的回答。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行为 $ n $，表示手办总数。<br>接下来一行 $ n $ 个数 $a_1,a_2,…,a_n$，$ a_i $ 表示第 $i$ 个手办的标号。<br>接下来一行为 $ m $，表示总操作数。<br>接下来 $ m $ 行，格式见「题目描述」。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>对于每次查询，输出一行 $ x $ 个数，每个数中间以空格间隔，按从小到大顺序排列；如果区间内小于 $ k $ 的数不足 $ x $ 个，输出 $ -1 $。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 2 3</span><br><span class="line">4</span><br><span class="line">1 1 2 2</span><br><span class="line">2 1 3 1 3</span><br><span class="line">2 1 3 2 1</span><br><span class="line">2 1 3 3 2</span><br></pre></td></tr></table></figure><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-1</span><br><span class="line">-1</span><br><span class="line">2 2</span><br></pre></td></tr></table></figure><h4 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h4><p>开始序列为 ${1,2,3}$；<br>第一次操作修改后的序列为 ${2,2,3}$；<br>第二次操作查询时，区间内最小的 $3$ 个数依次为 $2,2,3$，因为 $3$ 不小于 $1$ 所以答案为 $-1$；<br>第三次操作查询时，区间内最小的 $1$ 个数为 $2$，因为 $2$ 不小于 $2$ 所以答案为 $-1$；<br>第四次操作查询时，区间内最小的 $2$ 个数依次为 $2,2$，因为 $2$ 小于 $3$ 所以答案为 $2,2$。</p><h4 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h4><p>$\sum{x}\leq 5\times 10^6$<br>输出总数量不超过 $2\times 10^6$ 个整数，包括 $-1$。</p><p>出题人的关怀：由于输入规模较大，建议使用读入优化。</p><hr><p>注意到 $\sum x\leq5\times10^6$</p><p>考虑用线段树维护区间最小值和最小值的位置，用堆来暴力处理查询，即先将区间最小值加到堆中，取出后拆成两个区间，分别将两个子区间的区间最小值加进去，这样操作 $x$ 次即可</p><p>复杂度为 $O(\log n\sum x)$</p><p>修改操作直接打 $lazy$ 就行了</p><hr><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 500005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*p1,*p2;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC (p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,1,1&lt;&lt;20,stdin),p1==p2)?0:*p1++)</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">int</span> _R()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span> t=GC;<span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(t&lt;<span class="number">48</span>||t&gt;<span class="number">57</span>)t=GC;</span><br><span class="line">    <span class="keyword">for</span>(;t&gt;<span class="number">47</span>&amp;&amp;t&lt;<span class="number">58</span>;t=GC)x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+t<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">minn</span>&#123;</span><span class="keyword">int</span> v,x;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span>&#123;</span><span class="keyword">int</span> l,r;minn v;&#125;;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(data a,data b)&#123;<span class="keyword">return</span> a.v.v&gt;b.v.v;&#125;</span><br><span class="line"><span class="keyword">int</span> n,a[N],m,ans[N],tp;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    node *ls,*rs;</span><br><span class="line">    <span class="keyword">int</span> Min,pos,lazy;</span><br><span class="line">&#125;seg[N&lt;&lt;<span class="number">1</span>],*rt,*tl,*null;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rt=tl=null=seg;</span><br><span class="line">    null-&gt;ls=null-&gt;rs=null;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(node *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node *l=p-&gt;ls,*r=p-&gt;rs;</span><br><span class="line">    <span class="keyword">if</span>(l-&gt;Min&lt;r-&gt;Min)p-&gt;Min=l-&gt;Min,p-&gt;pos=l-&gt;pos;</span><br><span class="line">    <span class="keyword">else</span> p-&gt;Min=r-&gt;Min,p-&gt;pos=r-&gt;pos;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(node *&amp;p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p=++tl;p-&gt;ls=p-&gt;rs=null;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;p-&gt;Min=a[l];p-&gt;pos=l;<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(p-&gt;ls,l,mid);</span><br><span class="line">    build(p-&gt;rs,mid+<span class="number">1</span>,r);</span><br><span class="line">    update(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">putdown</span><span class="params">(node *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node *l=p-&gt;ls,*r=p-&gt;rs;</span><br><span class="line">    <span class="keyword">int</span> d=p-&gt;lazy;p-&gt;lazy=<span class="number">0</span>;</span><br><span class="line">    l-&gt;Min=max(l-&gt;Min,d);</span><br><span class="line">    l-&gt;lazy=max(l-&gt;lazy,d);</span><br><span class="line">    r-&gt;Min=max(r-&gt;Min,d);</span><br><span class="line">    r-&gt;lazy=max(r-&gt;lazy,d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(node *p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;Min&gt;=d)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;lazy)putdown(p);</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        p-&gt;Min=max(p-&gt;Min,d);</span><br><span class="line">        p-&gt;lazy=max(p-&gt;lazy,d);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid)modify(p-&gt;ls,l,mid,x,y,d);</span><br><span class="line">    <span class="keyword">if</span>(y&gt;mid)modify(p-&gt;rs,mid+<span class="number">1</span>,r,x,y,d);</span><br><span class="line">    update(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">minn <span class="title">getmin</span><span class="params">(node *p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)<span class="keyword">return</span> (minn)&#123;p-&gt;Min,p-&gt;pos&#125;;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;lazy)putdown(p);</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;minn tl,tr;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;mid)<span class="keyword">return</span> getmin(p-&gt;rs,mid+<span class="number">1</span>,r,x,y);</span><br><span class="line">    <span class="keyword">if</span>(y&lt;=mid)<span class="keyword">return</span> getmin(p-&gt;ls,l,mid,x,y);</span><br><span class="line">    tl=getmin(p-&gt;ls,l,mid,x,y);</span><br><span class="line">    tr=getmin(p-&gt;rs,mid+<span class="number">1</span>,r,x,y);</span><br><span class="line">    <span class="keyword">return</span> tl.v&lt;tr.v?tl:tr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,k,x,y,z;</span><br><span class="line">    n=_R();</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)a[i]=_R();</span><br><span class="line">    Init();build(rt,<span class="number">1</span>,n);</span><br><span class="line">    m=_R();</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        j=_R();</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x=_R();y=_R();z=_R();</span><br><span class="line">            modify(rt,<span class="number">1</span>,n,x,y,z);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            x=_R();y=_R();k=_R();z=_R();</span><br><span class="line">            priority_queue&lt;data&gt;Q;tp=<span class="number">0</span>;</span><br><span class="line">            Q.push((data)&#123;x,y,getmin(rt,<span class="number">1</span>,n,x,y)&#125;);</span><br><span class="line">            <span class="keyword">while</span>(Q.size()&amp;&amp;tp&lt;z)</span><br><span class="line">            &#123;</span><br><span class="line">                data tmp=Q.top();Q.pop();</span><br><span class="line">                <span class="keyword">if</span>(tmp.v.v&gt;=k)<span class="keyword">break</span>;</span><br><span class="line">                ans[++tp]=tmp.v.v;</span><br><span class="line">                <span class="keyword">if</span>(tmp.v.x&gt;tmp.l)Q.push((data)&#123;tmp.l,tmp.v.x<span class="number">-1</span>,getmin(rt,<span class="number">1</span>,n,tmp.l,tmp.v.x<span class="number">-1</span>)&#125;);</span><br><span class="line">                <span class="keyword">if</span>(tmp.v.x&lt;tmp.r)Q.push((data)&#123;tmp.v.x+<span class="number">1</span>,tmp.r,getmin(rt,<span class="number">1</span>,n,tmp.v.x+<span class="number">1</span>,tmp.r)&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(tp&lt;z)<span class="built_in">printf</span>(<span class="string">"-1"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;=tp;k++)<span class="built_in">printf</span>(<span class="string">"%d "</span>,ans[k]);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h4&gt;&lt;p&gt;众所周知，ZQC 是个很喜欢收纳手办的大佬，他平时在写题前会先扫视一下桌面上排开的小姐姐们以获取灵感。假设他有 $ n(1 
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="线段树" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="堆" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/"/>
    
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="堆" scheme="http://yoursite.com/tags/%E5%A0%86/"/>
    
  </entry>
  
  <entry>
    <title>THUWC2017 在美妙的数学王国中畅游（LCT）</title>
    <link href="http://yoursite.com/2018/09/14/THUWC2017-%E5%9C%A8%E7%BE%8E%E5%A6%99%E7%9A%84%E6%95%B0%E5%AD%A6%E7%8E%8B%E5%9B%BD%E4%B8%AD%E7%95%85%E6%B8%B8%EF%BC%88LCT%EF%BC%89/"/>
    <id>http://yoursite.com/2018/09/14/THUWC2017-在美妙的数学王国中畅游（LCT）/</id>
    <published>2018-09-14T12:16:59.000Z</published>
    <updated>2018-09-14T12:25:13.737Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>数字和数学规律主宰着这个世界。</p><p>机器的运转，</p><p>生命的消长，</p><p>宇宙的进程，</p><p>这些神秘而又美妙的过程无不可以用数学的语言展现出来。</p><p>这印证了一句古老的名言：</p><p>“学好数理化，走遍天下都不怕。”</p><p>学渣小R被大学的数学课程虐得生活不能自理，微积分的成绩曾是他在教室里上的课的最低分。然而他的某位陈姓室友却能轻松地在数学考试中得到满分。为了提升自己的数学课成绩，有一天晚上（在他睡觉的时候），他来到了数学王国。</p><p>数学王国中，每个人的智商可以用一个属于 $[0,1]$ 的实数表示。数学王国中有 $n$ 个城市，编号从 $0$ 到 $n-1$ ，这些城市由若干座魔法桥连接。每个城市的中心都有一个魔法球，每个魔法球中藏有一道数学题。每个人在做完这道数学题之后都会得到一个在 $[0,1]$ 区间内的分数。一道题可以用一个从 $[0,1]$ 映射到 $[0,1]$ 的函数 $f(x)$ 表示。若一个人的智商为 $x$ ，则他做完这道数学题之后会得到 $f(x)$ 分。函数 $f$ 有三种形式：</p><ul><li><p>正弦函数 $\sin(a x + b)\ (a \in [0,1], b \in [0,\pi],a+b\in[0,\pi])$</p></li><li><p>指数函数 $e^{ax+b}\ (a\in [-1,1], b\in [-2,0], a+b\in [-2,0])$</p></li><li><p>一次函数 $ax + b\ (a\in [-1,1],b\in[0,1],a+b\in [0,1])$ </p></li></ul><p>数学王国中的魔法桥会发生变化，有时会有一座魔法桥消失，有时会有一座魔法桥出现。但在任意时刻，只存在至多一条连接任意两个城市的简单路径（即所有城市形成一个森林）。在初始情况下，数学王国中不存在任何的魔法桥。</p><p>数学王国的国王拉格朗日很乐意传授小R数学知识，但前提是小R要先回答国王的问题。这些问题具有相同的形式，即一个智商为 $x$ 的人从城市 $u$ 旅行到城市 $v$ （即经过 $u$ 到 $v$ 这条路径上的所有城市，包括 $u$ 和 $v$ ）且做了所有城市内的数学题后，他所有得分的总和是多少。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行两个正整数 $n,m$ 和一个字符串 $type$ 。表示数学王国中共有 $n$ 座城市，发生了 $m$ 个事件，该数据的类型为 $type$ 。 $type$ 字符串是为了能让大家更方便地获得部分分，你可能不需要用到这个输入。其具体含义在<strong>【数据范围与提示】</strong>中有解释。</p><p>接下来 $n$ 行，第 $i$ 行表示初始情况下编号为 $i$ 的城市的魔法球中的函数。一个魔法用一个整数 $f$ 表示函数的类型，两个实数 $a,b$ 表示函数的参数，若</p><ul><li>$f=1$ ,则函数为 $f(x)=\sin(ax+b)(a \in [0,1], b \in [0,\pi],a+b\in[0,\pi])$</li><li>$f=2$ ,则函数为 $f(x)=e^{ax+b}(a\in[-1,1],b\in[-2,0],a+b\in[-2,0])$</li><li>$f=3$ ,则函数为 $f(x)=ax+b(a\in[-1,1],b\in[0,1],a+b\in[0,1])$</li></ul><p>接下来 $m$ 行，每行描述一个事件，事件分为四类。</p><ul><li><code>appear u v</code> 表示数学王国中出现了一条连接 $u$ 和 $v$ 这两座城市的魔法桥 $(0\le u,v &lt; n, u\ne v)$ ，保证连接前 $u$ 和 $v$ 这两座城市不能互相到达。</li><li><code>disappear u v</code> 表示数学王国中连接 $u$ 和 $v$ 这两座城市的魔法桥消失了，保证这座魔法桥是存在的。</li><li><code>magic c f a b</code> 表示城市 $c$ 的魔法球中的魔法变成了类型为 $f$ ，参数为 $a,b$ 的函数</li><li><code>travel u v x</code> 表示询问一个智商为 $x$ 的人从城市 $u$ 旅行到城市 $v$ （即经过 $u$ 到 $v$ 这条路径上的所有城市，包括 $u$ 和 $v$ ）后，他得分的总和是多少。若无法从 $u$ 到达 $v$ ，则输出一行一个字符串 <code>unreachable</code>。</li></ul><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>对于每个询问，输出一行实数，表示得分的总和。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">3 7 C1</span><br><span class="line">1 1 0</span><br><span class="line">3 0.5 0.5</span><br><span class="line">3 -0.5 0.7</span><br><span class="line">appear 0 1</span><br><span class="line">travel 0 1 0.3</span><br><span class="line">appear 0 2</span><br><span class="line">travel 1 2 0.5</span><br><span class="line">disappear 0 1</span><br><span class="line">appear 1 2</span><br><span class="line">travel 1 2 0.5</span><br></pre></td></tr></table></figure><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">9.45520207e-001</span><br><span class="line">1.67942554e+000</span><br><span class="line">1.20000000e+000</span><br></pre></td></tr></table></figure><h4 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h4><h5 id="【小R教你学数学】"><a href="#【小R教你学数学】" class="headerlink" title="【小R教你学数学】"></a>【小R教你学数学】</h5><p>若函数 $f(x)$ 的 $n$ 阶导数在 $[a,b]$ 区间内连续，则对 $f(x)$ 在 $x_0(x_0\in[a,b])$ 处使用 $n$ 次拉格朗日中值定理可以得到带拉格朗日余项的泰勒展开式</p><p> $f(x)=f(x_0)+\frac{f’(x_0)(x-x_0)}{1!}+\frac{f’’(x_0)(x-x_0)^2}{2!}+ \cdots +\frac{f^{(n-1)}(x_0)(x-x_0)^{n-1}}{(n-1)!}+\frac{f^{(n)}(\xi)(x-x_0)^n}{n!},x\in[a,b]$</p><p>其中，当 $x&gt;x_0$ 时，$\xi\in[x_0,x]$。当 $x&lt;x_0$ 时，$\xi\in[x,x_0]$。</p><p>$f^{(n)}$表示函数 $f$ 的 $n$ 阶导数</p><h5 id="【数据范围】"><a href="#【数据范围】" class="headerlink" title="【数据范围】"></a>【数据范围】</h5><p>对于 $100\%$ 的数据，$1\leq n \leq 100000, 1\leq m \leq 200000$ 。</p><p>本题共有20个数据点，每个数据点5分。</p><p>对于 $5\%$ 的数据，$n\le 100,m\le 2000$，数据类型为<code>C1</code>；<br>对于另外 $20\%$ 的数据，数据类型为<code>A0</code>；<br>对于另外 $5\%$ 的数据，数据类型为<code>B0</code>；<br>对于另外 $10\%$ 的数据，数据类型为<code>D0</code>；<br>对于另外 $30\%$ 的数据，数据类型为<code>A1</code>；<br>对于另外 $15\%$ 的数据，数据类型为<code>C1</code>；  </p><p>数据类型的含义：</p><p>A：不存在 <code>disappear</code> 事件，且所有<code>appear</code>事件中的 $u=v-1$</p><p>B：不存在 <code>disappear</code> 事件</p><p>C：所有的 <code>travel</code> 事件经过的城市总数 $\leq 5000000$（不可到达的城市对不计入在内）</p><p>D：无限制</p><p>0：所有 <code>travel</code> 事件中，$x=1$（即所有人的智商均为 $1$ ）</p><p>1：无限制</p><h5 id="【评分标准】"><a href="#【评分标准】" class="headerlink" title="【评分标准】"></a>【评分标准】</h5><p>如果你的答案与标准答案的相对误差在 $10^{-7}$ 以内或绝对误差在 $10^{-7}$ 以内，则被判定为正确。</p><p>如果你的所有答案均为正确，则得满分，否则得0分。</p><p>请注意输出格式：每行输出一个答案，答案只能为 <code>unreachable</code> 或者一个实数（建议使用科学计数法表示）。每行的长度不得超过50。错误输出格式会被判定为0分。</p><hr><p>提示里已经将做法点明了，直接将题给的函数在 $x_0=0$ 处展开成一个多项式，然后就可以直接上 $LCT$ 维护了</p><p>注意到展开位数越多则精度越高，但运行速度越慢，所以展开十几位就差不多了</p><p>剩下的都是 $LCT$ 的基本操作了</p><hr><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> db double</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> K=<span class="number">11</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">poly</span>&#123;</span>db a[K];&#125;v[N],sum[N];</span><br><span class="line">poly <span class="keyword">operator</span>+(poly a,poly b)</span><br><span class="line">&#123;</span><br><span class="line">    poly c;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;i++)c.a[i]=a.a[i]+b.a[i];</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">db <span class="title">getval</span><span class="params">(poly a,db x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    db sum=<span class="number">0</span>,t=<span class="number">1.0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;i++,t*=x)sum+=a.a[i]*t;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">poly <span class="title">trans</span><span class="params">(<span class="keyword">int</span> f,db a,db b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    poly c;</span><br><span class="line">    <span class="keyword">if</span>(f==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        db S=<span class="built_in">sin</span>(b),C=<span class="built_in">cos</span>(b),t=<span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;i++,t=t/i*a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i&amp;<span class="number">1</span>)c.a[i]=((i&amp;<span class="number">3</span>)==<span class="number">1</span>)?t*C:-t*C;</span><br><span class="line">            <span class="keyword">else</span> c.a[i]=((i&amp;<span class="number">3</span>)==<span class="number">0</span>)?t*S:-t*S;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f==<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        db t=<span class="built_in">exp</span>(b);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;i++,t=t/i*a)c.a[i]=t;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f==<span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(c.a,<span class="number">0</span>,<span class="keyword">sizeof</span>(c.a));</span><br><span class="line">        c.a[<span class="number">0</span>]=b;c.a[<span class="number">1</span>]=a;<span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m,ls[N],rs[N],fa[N],tot,rt,rev[N],S[N],tp;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isroot</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> ls[fa[x]]!=x&amp;&amp;rs[fa[x]]!=x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;sum[x]=v[x]+sum[ls[x]]+sum[rs[x]];&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zig</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y=fa[x],z=fa[y];</span><br><span class="line">    <span class="keyword">if</span>(!isroot(y))y==ls[z]?ls[z]=x:rs[z]=x;fa[x]=z;</span><br><span class="line">    ls[y]=rs[x];fa[rs[x]]=y;</span><br><span class="line">    rs[x]=y;fa[y]=x;</span><br><span class="line">    update(y);update(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zag</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y=fa[x],z=fa[y];</span><br><span class="line">    <span class="keyword">if</span>(!isroot(y))y==ls[z]?ls[z]=x:rs[z]=x;fa[x]=z;</span><br><span class="line">    rs[y]=ls[x];fa[ls[x]]=y;</span><br><span class="line">    ls[x]=y;fa[y]=x;</span><br><span class="line">    update(y);update(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">putdown</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(rev[x])</span><br><span class="line">    &#123;</span><br><span class="line">        swap(ls[x],rs[x]);</span><br><span class="line">        rev[ls[x]]^=<span class="number">1</span>;</span><br><span class="line">        rev[rs[x]]^=<span class="number">1</span>;</span><br><span class="line">        rev[x]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,y,z;S[tp=<span class="number">1</span>]=x;</span><br><span class="line">    <span class="keyword">for</span>(i=x;!isroot(i);i=fa[i])S[++tp]=fa[i];</span><br><span class="line">    <span class="keyword">while</span>(tp)putdown(S[tp--]);</span><br><span class="line">    <span class="keyword">while</span>(!isroot(x))</span><br><span class="line">    &#123;</span><br><span class="line">        y=fa[x],z=fa[y];</span><br><span class="line">        <span class="keyword">if</span>(!isroot(y))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(y==ls[z])x==ls[y]?(zig(y),zig(x)):(zag(x),zig(x));</span><br><span class="line">            <span class="keyword">else</span> x==rs[y]?(zag(y),zag(x)):(zig(x),zag(x));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> x==ls[y]?zig(x):zag(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">0</span>;x;x=fa[x])</span><br><span class="line">    &#123;</span><br><span class="line">        splay(x);</span><br><span class="line">        rs[x]=t;</span><br><span class="line">        update(x);t=x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeroot</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    access(x);</span><br><span class="line">    splay(x);</span><br><span class="line">    rev[x]^=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findroot</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    access(x);</span><br><span class="line">    splay(x);</span><br><span class="line">    <span class="keyword">while</span>(ls[x])x=ls[x];</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    makeroot(x);</span><br><span class="line">    fa[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    makeroot(x);</span><br><span class="line">    access(y);</span><br><span class="line">    splay(y);</span><br><span class="line">    ls[y]=fa[x]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x,poly d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    makeroot(x);</span><br><span class="line">    splay(x);</span><br><span class="line">    v[x]=d;update(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">db <span class="title">getans</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,db d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    makeroot(x);</span><br><span class="line">    access(y);</span><br><span class="line">    splay(y);</span><br><span class="line">    <span class="keyword">return</span> getval(sum[y],d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,k,x,y;<span class="keyword">double</span> a,b,d;<span class="keyword">char</span> s[<span class="number">12</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%s"</span>,&amp;n,&amp;m,s);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%lf%lf"</span>,&amp;k,&amp;a,&amp;b);</span><br><span class="line">        v[i]=sum[i]=trans(k,a,b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">        <span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">'a'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">            link(x+<span class="number">1</span>,y+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">'d'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">            cut(x+<span class="number">1</span>,y+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">'m'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%lf%lf"</span>,&amp;x,&amp;k,&amp;a,&amp;b);</span><br><span class="line">            modify(x+<span class="number">1</span>,trans(k,a,b));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">'t'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%lf"</span>,&amp;x,&amp;y,&amp;d);</span><br><span class="line">            <span class="keyword">if</span>(findroot(x+<span class="number">1</span>)==findroot(y+<span class="number">1</span>))<span class="built_in">printf</span>(<span class="string">"%.10lf\n"</span>,getans(x+<span class="number">1</span>,y+<span class="number">1</span>,d));</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"unreachable"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h4&gt;&lt;p&gt;数字和数学规律主宰着这个世界。&lt;/p&gt;
&lt;p&gt;机器的运转，&lt;/p&gt;
&lt;p&gt;生命的消长，&lt;/p&gt;
&lt;p&gt;宇宙的进程，&lt;/p&gt;

      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="LCT" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/LCT/"/>
    
    
      <category term="LCT" scheme="http://yoursite.com/tags/LCT/"/>
    
  </entry>
  
  <entry>
    <title>SHOI2016 随机序列（线段树）</title>
    <link href="http://yoursite.com/2018/09/14/SHOI2016-%E9%9A%8F%E6%9C%BA%E5%BA%8F%E5%88%97%EF%BC%88%E7%BA%BF%E6%AE%B5%E6%A0%91%EF%BC%89/"/>
    <id>http://yoursite.com/2018/09/14/SHOI2016-随机序列（线段树）/</id>
    <published>2018-09-14T11:08:21.000Z</published>
    <updated>2018-09-14T12:11:25.226Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>你的面前有 $n$ 个数排成一行，分别为 $a_1, a_2, \dots, a_n$。你打算在每相邻的两个 $a_i$ 和 $a_{i+1}$ 间都插入一个加号、减号或者乘号。那么一共有 $3^{n-1}$ 种可能的表达式。</p><p>你对所有可能的表达式的值的和非常感兴趣。但这毕竟太简单了，所以你还打算支持一个修改操作，可以修改某个 $a_i$ 的值。</p><p>你能够编写一个程序对每个修改都输出修改完之后所有可能表达式的和吗？注意，修改是永久的，也就是说每次修改都是在上一次修改的基础上进行，而不是在最初的表达式上进行。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含两个正整数 $n$ 和 $Q$，为数的个数和询问的个数。<br>第二行包含 $n$ 个非负整数，依次表示 $a_1, a_2, \dots, a_n$。<br>接下来 $Q$ 行，每行包含两个非负整数 $t$ 和 $v$，表示要将 $a_t$ 修改为 $v$，其中 $1 \leq t \leq n$。</p><p>保证对于 $1 \leq j \leq n, 1 \leq i \leq Q$，都有 $a_j, v_i \leq 10^4$。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出 $Q$ 行。对于每个修改输出一行，包含一个整数，表示修改之后所有可能表达式的和，对 $10^9 + 7$ 取模。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">5 5</span><br><span class="line">9384 887 2778 6916 7794</span><br><span class="line">2 8336</span><br><span class="line">5 493</span><br><span class="line">3 1422</span><br><span class="line">1 28</span><br><span class="line">4 60</span><br></pre></td></tr></table></figure><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">890543652</span><br><span class="line">252923708</span><br><span class="line">942282590</span><br><span class="line">228728040</span><br><span class="line">608998099</span><br></pre></td></tr></table></figure><h4 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h4><table><thead><tr><th style="text-align:center">Case #</th><th style="text-align:center">$n, Q$</th></tr></thead><tbody><tr><td style="text-align:center">1, 2</td><td style="text-align:center">$\leq 10$</td></tr><tr><td style="text-align:center">3 - 5</td><td style="text-align:center">$\leq 1\,000$</td></tr><tr><td style="text-align:center">6 - 10</td><td style="text-align:center">$\leq 100\,000$</td></tr></tbody></table><hr><p>观察一下能够发现，会对答案产生贡献的只有第一个非乘号的位置之前的部分，也就是开始的连续一段乘号</p><p>那么考虑用线段树维护，每个点存三个值，区间内的答案，区间内的总方案数，区间乘积</p><p>合并的时候讨论左右区间之间放什么，如果放加减，那么贡献是左区间答案乘以右区间方案数</p><p>如果放乘号，当左区间全放乘号时，贡献是右区间答案乘以左区间乘积和，否则还是左区间答案乘右区间方案数</p><hr><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*p1,*p2;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC (p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,1,1&lt;&lt;20,stdin),p1==p2)?0:*p1++)</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">int</span> _R()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span> t=GC;<span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(t&lt;<span class="number">48</span>||t&gt;<span class="number">57</span>)t=GC;</span><br><span class="line">    <span class="keyword">for</span>(;t&gt;<span class="number">47</span>&amp;&amp;t&lt;<span class="number">58</span>;t=GC)x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+t<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;a+=b;<span class="keyword">return</span> a&gt;=mod?a-mod:a;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;a-=b;<span class="keyword">return</span> a&lt;<span class="number">0</span>?a+mod:a;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;<span class="keyword">return</span> <span class="number">1l</span>l*a*b%mod;&#125;</span><br><span class="line"><span class="keyword">int</span> n,q,a[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    node *ls,*rs;</span><br><span class="line">    <span class="keyword">int</span> b,l,m;</span><br><span class="line">&#125;seg[N&lt;&lt;<span class="number">1</span>],*rt,*tl,*null;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rt=tl=null=seg;</span><br><span class="line">    null-&gt;ls=null-&gt;rs=null;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(node *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node *l=p-&gt;ls,*r=p-&gt;rs;</span><br><span class="line">    p-&gt;l=add(mul(mul(l-&gt;l,r-&gt;b),<span class="number">3</span>),mul(l-&gt;m,sub(r-&gt;l,r-&gt;b)));</span><br><span class="line">    p-&gt;m=mul(l-&gt;m,r-&gt;m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(node *&amp;p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p=++tl;p-&gt;ls=p-&gt;rs=null;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;p-&gt;l=p-&gt;m=a[l];p-&gt;b=<span class="number">1</span>;<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(p-&gt;ls,l,mid);</span><br><span class="line">    build(p-&gt;rs,mid+<span class="number">1</span>,r);</span><br><span class="line">    update(p);</span><br><span class="line">    p-&gt;b=mul(<span class="number">3</span>,mul(p-&gt;ls-&gt;b,p-&gt;rs-&gt;b));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(node *p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;p-&gt;l=p-&gt;m=d;<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid)modify(p-&gt;ls,l,mid,x,d);</span><br><span class="line">    <span class="keyword">else</span> modify(p-&gt;rs,mid+<span class="number">1</span>,r,x,d);</span><br><span class="line">    update(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,k,x,y;</span><br><span class="line">    n=_R();q=_R();</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)a[i]=_R();</span><br><span class="line">    Init();build(rt,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x=_R();y=_R();</span><br><span class="line">        modify(rt,<span class="number">1</span>,n,x,y);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,rt-&gt;l);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h4&gt;&lt;p&gt;你的面前有 $n$ 个数排成一行，分别为 $a_1, a_2, \dots, a_n$。你打算在每相邻的两个 $a_i$ 和
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="线段树" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>SHOI2015 脑洞治疗仪（线段树）</title>
    <link href="http://yoursite.com/2018/09/14/SHOI2015-%E8%84%91%E6%B4%9E%E6%B2%BB%E7%96%97%E4%BB%AA%EF%BC%88%E7%BA%BF%E6%AE%B5%E6%A0%91%EF%BC%89/"/>
    <id>http://yoursite.com/2018/09/14/SHOI2015-脑洞治疗仪（线段树）/</id>
    <published>2018-09-14T11:08:21.000Z</published>
    <updated>2018-09-14T11:32:54.274Z</updated>
    
    <content type="html"><![CDATA[<h5 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h5><p>曾经发明了自动刷题机的发明家 SHTSC 又公开了他的新发明：脑洞治疗仪——一种可以治疗他因为发明而日益增大的脑洞的神秘装置。</p><p>为了简单起见，我们将大脑视作一个 01 序列。$1$ 代表这个位置的脑组织正常工作，$0$ 代表这是一块脑洞。</p><table><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">0</td><td style="text-align:center;">1</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">1</td><td style="text-align:center;">1</td><td style="text-align:center;">1</td><td style="text-align:center;">0</td></tr></tbody></table><p>脑洞治疗仪修补某一块脑洞的基本工作原理就是将另一块连续区域挖出，将其中正常工作的脑组织填补在这块脑洞中。（所以脑洞治疗仪是脑洞的治疗仪？）</p><p>例如，用上面第 $8$ 号位置到第 $10$ 号位置去修补第 $1$ 号位置到第 $4$ 号位置的脑洞，我们就会得到：</p><table><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">1</td><td style="text-align:center;">1</td><td style="text-align:center;">1</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">1</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td></tr></tbody></table><p>如果再用第 $1$ 号位置到第 $4$ 号位置去修补第 $8$ 号位置到第 $10$ 号位置：</p><p><table><tbody><tr><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">1</td><td style="text-align:center;">1</td><td style="text-align:center;">1</td><td style="text-align:center;">1</td></tr></tbody></table><br>这是因为脑洞治疗仪会把多余出来的脑组织直接扔掉。</p><p>如果再用第 $7$ 号位置到第 $10$ 号位置去填补第 $1$ 号位置到第 $6$ 号位置：</p><p><table><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">1</td><td style="text-align:center;">1</td><td style="text-align:center;">1</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td></tr></tbody></table><br>这是因为如果新脑洞挖出来的脑组织不够多，脑洞治疗仪仅会尽量填补位置比较靠前的脑洞。</p><p>假定初始时 SHTSC 并没有脑洞，给出一些挖脑洞和脑洞治疗的操作序列，你需要即时回答 SHTSC 的问题：在大脑某个区间中最大的连续脑洞区域有多大。</p><h5 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h5><p>第一行两个整数 $n$、$m$，表示 SHTSC 的大脑可分为从 $1$ 到 $n$ 编号的 $n$ 个连续区域，有 $m$ 个操作。</p><p>以下 $m$ 行每行是下列三种格式之一：</p><ul><li>$0\quad l\quad r$：SHTSC 挖了一个范围为 $[l, r]$ 的脑洞。</li><li>$1\quad l_0\quad r_0\quad l_1\quad r_1$：SHTSC 进行了一次脑洞治疗，用从 $l_0$ 到 $r_0$ 的脑组织修补 $l_1$ 到 $r_1$ 的脑洞。</li><li>$2\quad l\quad r$：SHTSC 询问 $[l, r]$ 区间内最大的脑洞有多大。</li></ul><p>上述区间均在 $[1, n]$ 范围内。</p><h5 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h5><p>对于每个询问，输出一行一个整数，表示询问区间内最大连续脑洞区域有多大。</p><h5 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">10 10</span><br><span class="line">0 2 2</span><br><span class="line">0 4 6</span><br><span class="line">0 10 10</span><br><span class="line">2 1 10</span><br><span class="line">1 8 10 1 4</span><br><span class="line">2 1 10</span><br><span class="line">1 1 4 8 10</span><br><span class="line">2 1 10</span><br><span class="line">1 7 10 1 6</span><br><span class="line">2 1 10</span><br></pre></td></tr></table></figure><h5 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">3</span><br><span class="line">6</span><br><span class="line">6</span><br></pre></td></tr></table></figure><h5 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h5><p>对于 $20\%$ 的数据，$n, m \leq 100$；<br>对于 $50\%$ 的数据，$n, m \leq 20000$；<br>对于 $100\%$ 的数据，$n, m \leq 200000$。</p><hr><p>唯一特殊的操作就是治疗操作，但是容易发现，只需要先查询 $[l_0,r_0]$ 的脑组织数量，填的时候就是先填左边，再填右边，如果当前区间能填完，就打个区间覆盖标记然后返回，或者脑组织填完了也返回，容易发现这样复杂度就是一个 $\log $ 的了</p><p>剩下的就只需要写一个维护区间最大连续0的线段树就好了</p><hr><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*p1,*p2;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC (p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,1,1&lt;&lt;20,stdin),p1==p2)?0:*p1++)</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">int</span> _R()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span> t=GC;<span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(t&lt;<span class="number">48</span>||t&gt;<span class="number">57</span>)t=GC;</span><br><span class="line">    <span class="keyword">for</span>(;t&gt;<span class="number">47</span>&amp;&amp;t&lt;<span class="number">58</span>;t=GC)x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+t<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span>&#123;</span><span class="keyword">int</span> Lmax,Rmax,Max,sum,len;&#125;;</span><br><span class="line">data <span class="keyword">operator</span>+(data a,data b)</span><br><span class="line">&#123;</span><br><span class="line">    data c=(data)&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span>(a.sum==a.len)c.Lmax=a.len+b.Lmax;</span><br><span class="line">    <span class="keyword">else</span> c.Lmax=a.Lmax;</span><br><span class="line">    <span class="keyword">if</span>(b.sum==b.len)c.Rmax=b.len+a.Rmax;</span><br><span class="line">    <span class="keyword">else</span> c.Rmax=b.Rmax;</span><br><span class="line">    c.Max=max(max(a.Max,b.Max),a.Rmax+b.Lmax);</span><br><span class="line">    c.sum=a.sum+b.sum;</span><br><span class="line">    c.len=a.len+b.len;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    node *ls,*rs;</span><br><span class="line">    data v;<span class="keyword">int</span> lazy;</span><br><span class="line">&#125;seg[N&lt;&lt;<span class="number">1</span>],*rt,*tl,*null;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rt=tl=null=seg;null-&gt;lazy=<span class="number">-1</span>;</span><br><span class="line">    null-&gt;ls=null-&gt;rs=null;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(node *&amp;p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p=++tl;p-&gt;lazy=<span class="number">-1</span>;</span><br><span class="line">    p-&gt;ls=p-&gt;rs=null;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;p-&gt;v=(data)&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(p-&gt;ls,l,mid);</span><br><span class="line">    build(p-&gt;rs,mid+<span class="number">1</span>,r);</span><br><span class="line">    p-&gt;v=p-&gt;ls-&gt;v+p-&gt;rs-&gt;v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">putdown</span><span class="params">(node *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node *l=p-&gt;ls,*r=p-&gt;rs;</span><br><span class="line">    l-&gt;lazy=r-&gt;lazy=p-&gt;lazy;</span><br><span class="line">    <span class="keyword">int</span> dl=l-&gt;v.len,dr=r-&gt;v.len;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;lazy==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        l-&gt;v=(data)&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,dl&#125;;</span><br><span class="line">        r-&gt;v=(data)&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,dr&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        l-&gt;v=(data)&#123;dl,dl,dl,dl,dl&#125;;</span><br><span class="line">        r-&gt;v=(data)&#123;dr,dr,dr,dr,dr&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;lazy=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cover</span><span class="params">(node *p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;lazy!=<span class="number">-1</span>)putdown(p);</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> d=p-&gt;v.len;</span><br><span class="line">        p-&gt;v=(data)&#123;d,d,d,d,d&#125;;</span><br><span class="line">        p-&gt;lazy=<span class="number">0</span>;<span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid)cover(p-&gt;ls,l,mid,x,y);</span><br><span class="line">    <span class="keyword">if</span>(y&gt;mid)cover(p-&gt;rs,mid+<span class="number">1</span>,r,x,y);</span><br><span class="line">    p-&gt;v=p-&gt;ls-&gt;v+p-&gt;rs-&gt;v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">repair</span><span class="params">(node *p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;lazy!=<span class="number">-1</span>)putdown(p);</span><br><span class="line">    <span class="keyword">if</span>(d==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r&amp;&amp;d&gt;=p-&gt;v.sum)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> d=p-&gt;v.sum;</span><br><span class="line">        p-&gt;v=(data)&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,r-l+<span class="number">1</span>&#125;;</span><br><span class="line">        p-&gt;lazy=<span class="number">1</span>;<span class="keyword">return</span> d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid)sum+=repair(p-&gt;ls,l,mid,x,y,d);</span><br><span class="line">    <span class="keyword">if</span>(y&gt;mid)sum+=repair(p-&gt;rs,mid+<span class="number">1</span>,r,x,y,d-sum);</span><br><span class="line">    p-&gt;v=p-&gt;ls-&gt;v+p-&gt;rs-&gt;v;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getsum</span><span class="params">(node *p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;lazy!=<span class="number">-1</span>)putdown(p);</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)<span class="keyword">return</span> p-&gt;v.sum;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid)sum+=getsum(p-&gt;ls,l,mid,x,y);</span><br><span class="line">    <span class="keyword">if</span>(y&gt;mid)sum+=getsum(p-&gt;rs,mid+<span class="number">1</span>,r,x,y);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">data <span class="title">getmax</span><span class="params">(node *p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;lazy!=<span class="number">-1</span>)putdown(p);</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)<span class="keyword">return</span> p-&gt;v;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;mid)<span class="keyword">return</span> getmax(p-&gt;rs,mid+<span class="number">1</span>,r,x,y);</span><br><span class="line">    <span class="keyword">if</span>(y&lt;=mid)<span class="keyword">return</span> getmax(p-&gt;ls,l,mid,x,y);</span><br><span class="line">    <span class="keyword">return</span> getmax(p-&gt;ls,l,mid,x,y)+getmax(p-&gt;rs,mid+<span class="number">1</span>,r,x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,k,x,y,a,b;</span><br><span class="line">    n=_R();m=_R();</span><br><span class="line">    Init();build(rt,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        k=_R();x=_R();y=_R();</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">0</span>)cover(rt,<span class="number">1</span>,n,x,y);</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            a=_R();b=_R();</span><br><span class="line">            j=y-x+<span class="number">1</span>-getsum(rt,<span class="number">1</span>,n,x,y);</span><br><span class="line">            cover(rt,<span class="number">1</span>,n,x,y);</span><br><span class="line">            repair(rt,<span class="number">1</span>,n,a,b,j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">2</span>)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,getmax(rt,<span class="number">1</span>,n,x,y).Max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h5&gt;&lt;p&gt;曾经发明了自动刷题机的发明家 SHTSC 又公开了他的新发明：脑洞治疗仪——一种可以治疗他因为发明而日益增大的脑洞的神秘装置
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="线段树" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ3065 带插入区间Ｋ小值（替罪羊树套线段树）</title>
    <link href="http://yoursite.com/2018/09/04/BZOJ3065-%E5%B8%A6%E6%8F%92%E5%85%A5%E5%8C%BA%E9%97%B4K%E5%B0%8F%E5%80%BC%EF%BC%88%E6%9B%BF%E7%BD%AA%E7%BE%8A%E6%A0%91%E5%A5%97%E7%BA%BF%E6%AE%B5%E6%A0%91%EF%BC%89/"/>
    <id>http://yoursite.com/2018/09/04/BZOJ3065-带插入区间K小值（替罪羊树套线段树）/</id>
    <published>2018-09-04T14:01:54.000Z</published>
    <updated>2018-09-14T11:13:14.930Z</updated>
    
    <content type="html"><![CDATA[<h5 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h5><p>从前有n只跳蚤排成一行做早操，每只跳蚤都有自己的一个弹跳力a[i]。跳蚤国王看着这些跳蚤国欣欣向荣的情景，感到非常高兴。这时跳蚤国王决定理性愉悦一下，查询区间k小值。</p><p>他每次向它的随从伏特提出这样的问题: 从左往右第x个到第y个跳蚤中，a[i]第k小的值是多少。 这可难不倒伏特，他在脑袋里使用函数式线段树前缀和的方法水掉了跳蚤国王的询问。 </p><p>这时伏特发现有些跳蚤跳久了弹跳力会有变化，有的会增大，有的会减少。 这可难不倒伏特，他在脑袋里使用树状数组套线段树的方法水掉了跳蚤国王的询问。（orz 主席树） </p><p>这时伏特发现有些迟到的跳蚤会插入到这一行的某个位置上，他感到非常生气，因为……他不会做了。 请你帮一帮伏特吧。 </p><p>快捷版题意：带插入、修改的区间k小值在线查询。</p><h5 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h5><p>第一行一个正整数n，表示原来有n只跳蚤排成一行做早操。 </p><p>第二行有n个用空格隔开的非负整数，从左至右代表每只跳蚤的弹跳力。 </p><p>第三行一个正整数q，表示下面有多少个操作。 </p><p>下面一共q行，一共三种操作对原序列的操作：（假设此时一共m只跳蚤）</p><p><em>Q x y k: 询问从左至右第x只跳蚤到从左至右第y只跳蚤中，弹跳力第k小的跳蚤的弹跳力是多少。(1 &lt;= x &lt;= y &lt;= m, 1 &lt;= k &lt;= y - x + 1)</em></p><p><em>M x val: 将从左至右第x只跳蚤的弹跳力改为val。 (1 &lt;= x &lt;= m)</em></p><p><em>I x val: 在从左至右第x只跳蚤的前面插入一只弹跳力为val的跳蚤。即插入后从左至右第x只跳蚤是我刚插入的跳蚤。 (1 &lt;= x &lt;= m + 1)</em></p><p>为了体现在线操作，设lastAns为上一次查询的时候程序输出的结果，如果之前没有查询过，则lastAns = 0。 </p><p>则输入的时候实际是：</p><p> Q _x _y _k ——&gt; 表示 Q _x^lastAns _y^lastAns _k^lastAns </p><p>M _x _val ——&gt; 表示 M _x^lastAns _val^lastAns </p><p>I _x _val ——&gt; 表示 I _x^lastAns _val^lastAns </p><p>简单来说就是操作中输入的整数都要异或上一次询问的结果进行解码。</p><h5 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h5><p>对于每个询问输出回答，每行一个回答。</p><h5 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h5><p>10<br>10 5 8 28 0 19 2 31 1 22<br>30<br>I 6 9<br>M 1 11<br>I 8 17<br>M 1 31<br>M 6 26<br>Q 2 7 6<br>I 23 30<br>M 31 7<br>I 22 27<br>M 26 18<br>Q 26 17 31<br>I 5 2<br>I 18 13<br>Q 3 3 3<br>I 27 19<br>Q 23 23 30<br>Q 5 13 5<br>I 3 0<br>M 15 27<br>Q 0 28 13<br>Q 3 29 11<br>M 2 8<br>Q 12 5 7<br>I 30 19<br>M 11 19<br>Q 17 8 29<br>M 29 4<br>Q 3 0 12<br>I 7 18<br>M 29 27</p><h5 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h5><p>28<br>2<br>31<br>0<br>14<br>15<br>14<br>27<br>15<br>14</p><h5 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h5><p>原序列长度 &lt;= 35000</p><p>插入个数 &lt;= 35000，修改个数 &lt;= 70000，查询个数 &lt;= 70000 ,0 &lt;= 每时每刻的权值 &lt;= 70000</p><hr><p>这是一道经典题了，推荐看 $\rm vfk$ 官方题解</p><p>我写的替罪羊树套权值线段树的做法</p><p>具体的说就是用替罪羊树维护序列，每个节点上挂一颗权值线段树记该节点及子节点中出现的权值</p><p>那么建树的时候直接拍扁之后暴力建就行了，一次建树是 $n\log^2n$ 的，可以接受，据说可以线段树合并少一个 $\log$</p><p>然后修改就直接做， $O(\log^2n)$</p><p>插入的话也是直接在平衡树里找位置，然后沿着链往线段树里修改就行了， $O(\log^2n)$</p><p>然后过于不平衡的时候就直接重建就行了，均摊下来 $O(n\log^3 n)$</p><p>询问的时候像主席树那样把所有会用到的线段树的根先提出来，然后在线段树上二分， $O(\log^2 n)$</p><p>然后要特别注意垃圾回收，不然很容易爆掉</p><hr><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 70005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*p1,*p2;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC (p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,1,1&lt;&lt;20,stdin),p1==p2)?0:*p1++)</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">int</span> _R()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span> t=GC;<span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(t&lt;<span class="number">48</span>||t&gt;<span class="number">57</span>)t=GC;</span><br><span class="line">    <span class="keyword">for</span>(;t&gt;<span class="number">47</span>&amp;&amp;t&lt;<span class="number">58</span>;t=GC)x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+t<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">char</span> _C()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span> t=GC;</span><br><span class="line">    <span class="keyword">while</span>(t&lt;<span class="string">'A'</span>||t&gt;<span class="string">'Z'</span>)t=GC;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> U=<span class="number">70000</span>;</span><br><span class="line"><span class="keyword">int</span> n,q,a[N],tot;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    node *ls,*rs;</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">&#125;seg[N*<span class="number">128</span>],*seg_tl,*seg_null,*seg_pool[N*<span class="number">128</span>],*use[N];<span class="keyword">int</span> ty[N],dt,seg_tp;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nodd</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    nodd *ls,*rs;node *rt;</span><br><span class="line">    <span class="keyword">int</span> v,sz;</span><br><span class="line">&#125;scape[N],**Rt,*rt,*tl,*null,*pool[N];<span class="keyword">int</span> tp;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    seg_tl=seg_null=seg;</span><br><span class="line">    seg_null-&gt;ls=seg_null-&gt;rs=seg_null;</span><br><span class="line">    rt=tl=null=scape;Rt=&amp;null;</span><br><span class="line">    null-&gt;ls=null-&gt;rs=null;</span><br><span class="line">    null-&gt;rt=seg_null;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//seg</span></span><br><span class="line"><span class="function">node *<span class="title">New</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node *p=seg_tp?seg_pool[seg_tp--]:++seg_tl;</span><br><span class="line">    p-&gt;ls=p-&gt;rs=seg_null;p-&gt;v=<span class="number">0</span>;<span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(node *&amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p==seg_null)<span class="keyword">return</span>;</span><br><span class="line">    seg_pool[++seg_tp]=p;</span><br><span class="line">    del(p-&gt;ls);del(p-&gt;rs);</span><br><span class="line">    p=seg_null;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(node *&amp;p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p==seg_null)p=New();p-&gt;v+=d;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;v==<span class="number">0</span>)&#123;del(p);<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid)modify(p-&gt;ls,l,mid,x,d);</span><br><span class="line">    <span class="keyword">else</span> modify(p-&gt;rs,mid+<span class="number">1</span>,r,x,d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//scape</span></span><br><span class="line"><span class="function">nodd *<span class="title">New</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nodd *p=tp?pool[tp--]:++tl;</span><br><span class="line">    p-&gt;ls=p-&gt;rs=null;</span><br><span class="line">    p-&gt;sz=<span class="number">1</span>;p-&gt;v=x;</span><br><span class="line">    p-&gt;rt=seg_null;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(nodd *p)</span></span>&#123;p-&gt;sz=p-&gt;ls-&gt;sz+p-&gt;rs-&gt;sz+<span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">modify</span><span class="params">(nodd *p,<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    modify(p-&gt;rt,<span class="number">0</span>,U,k,<span class="number">1</span>);<span class="keyword">int</span> t;</span><br><span class="line">    <span class="keyword">if</span>(x==p-&gt;ls-&gt;sz+<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        modify(p-&gt;rt,<span class="number">0</span>,U,p-&gt;v,<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">int</span> t=p-&gt;v;p-&gt;v=k;<span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=p-&gt;ls-&gt;sz)t=modify(p-&gt;ls,x,k);</span><br><span class="line">    <span class="keyword">else</span> t=modify(p-&gt;rs,x-p-&gt;ls-&gt;sz<span class="number">-1</span>,k);</span><br><span class="line">    modify(p-&gt;rt,<span class="number">0</span>,U,t,<span class="number">-1</span>);<span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(nodd *&amp;p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    p=New(a[mid]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++)modify(p-&gt;rt,<span class="number">0</span>,U,a[i],<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(l&lt;mid)build(p-&gt;ls,l,mid<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;r)build(p-&gt;rs,mid+<span class="number">1</span>,r);</span><br><span class="line">    update(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(nodd *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p==null)<span class="keyword">return</span>;</span><br><span class="line">    del(p-&gt;ls);</span><br><span class="line">    a[++tot]=p-&gt;v;del(p-&gt;rt);</span><br><span class="line">    pool[++tp]=p;</span><br><span class="line">    del(p-&gt;rs);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rebuild</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot=<span class="number">0</span>;del(*Rt);</span><br><span class="line">    build(*Rt,<span class="number">1</span>,tot);</span><br><span class="line">    Rt=&amp;null;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(nodd *&amp;p,<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p==null)&#123;p=New(k);modify(p-&gt;rt,<span class="number">0</span>,U,k,<span class="number">1</span>);<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;ls-&gt;sz&gt;=x)</span><br><span class="line">    &#123;</span><br><span class="line">        insert(p-&gt;ls,x,k);</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;ls-&gt;sz&gt;=<span class="number">3</span>*p-&gt;sz&gt;&gt;<span class="number">2</span>)Rt=&amp;p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        insert(p-&gt;rs,x-p-&gt;ls-&gt;sz<span class="number">-1</span>,k);</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;rs-&gt;sz&gt;=<span class="number">3</span>*p-&gt;sz&gt;&gt;<span class="number">2</span>)Rt=&amp;p;</span><br><span class="line">    &#125;</span><br><span class="line">    modify(p-&gt;rt,<span class="number">0</span>,U,k,<span class="number">1</span>);update(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getrt</span><span class="params">(nodd *p,<span class="keyword">int</span> k,<span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p==null||k==<span class="number">0</span>)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(k==p-&gt;sz)&#123;use[++dt]=p-&gt;rt;ty[dt]=f;<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(k&lt;=p-&gt;ls-&gt;sz)getrt(p-&gt;ls,k,f);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        use[++dt]=p-&gt;rt;ty[dt]=f;</span><br><span class="line">        use[++dt]=p-&gt;rs-&gt;rt;ty[dt]=-f;</span><br><span class="line">        getrt(p-&gt;rs,k-p-&gt;ls-&gt;sz<span class="number">-1</span>,f);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getans</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">0</span>,r=U;dt=<span class="number">0</span>;</span><br><span class="line">    getrt(rt,y,<span class="number">1</span>);getrt(rt,x<span class="number">-1</span>,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;<span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=dt;i++)sum+=ty[i]*use[i]-&gt;ls-&gt;v;</span><br><span class="line">        <span class="keyword">if</span>(sum&gt;=k)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=dt;i++)use[i]=use[i]-&gt;ls;</span><br><span class="line">            r=mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=dt;i++)use[i]=use[i]-&gt;rs;</span><br><span class="line">            k-=sum;l=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,k,x,y,z,las=<span class="number">0</span>;<span class="keyword">char</span> c;</span><br><span class="line">    n=_R();</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)a[i]=_R();</span><br><span class="line">    q=_R();</span><br><span class="line">    Init();build(rt,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        c=_C();</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">'M'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x=_R();y=_R();</span><br><span class="line">            x^=las;y^=las;</span><br><span class="line">            modify(rt,x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">'Q'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x=_R();y=_R();z=_R();</span><br><span class="line">            x^=las;y^=las;z^=las;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,las=getans(x,y,z));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">'I'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x=_R();y=_R();</span><br><span class="line">            x^=las;y^=las;x--;</span><br><span class="line">            insert(rt,x,y);</span><br><span class="line">            <span class="keyword">if</span>(*Rt!=null)rebuild();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h5&gt;&lt;p&gt;从前有n只跳蚤排成一行做早操，每只跳蚤都有自己的一个弹跳力a[i]。跳蚤国王看着这些跳蚤国欣欣向荣的情景，感到非常高兴。这时
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="线段树" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="平衡树" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="平衡树" scheme="http://yoursite.com/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>CTSC 2018 青蕈领主（CDQ分治+NTT+单调栈）</title>
    <link href="http://yoursite.com/2018/05/09/CTSC-2018-%E9%9D%92%C2%96%E8%95%88%E9%A2%86%E4%B8%BB%EF%BC%88CDQ%E5%88%86%E6%B2%BB-NTT-%E6%A0%88%EF%BC%89/"/>
    <id>http://yoursite.com/2018/05/09/CTSC-2018-青蕈领主（CDQ分治-NTT-栈）/</id>
    <published>2018-05-09T01:59:29.000Z</published>
    <updated>2018-09-04T13:57:14.982Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CTSC2018-青蕈领主"><a href="#CTSC2018-青蕈领主" class="headerlink" title="CTSC2018 青蕈领主"></a>CTSC2018 青蕈领主</h1><p><strong>问题描述</strong></p><blockquote><blockquote><p>“也许，我的生命也已经如同风中残烛了吧。”小绿如是说。</p></blockquote><p>小绿同学因为微积分这门课，对“连续”这一概念产生了浓厚的兴趣。小绿打算把连续的概念放到由整数构成的序列上，他定义一个长度为 $m$ 的整数序列是连续的，当且仅当这个序列中的最大值与最小值的差，不超过$m-1$。例如 ${1,3,2}$ 是连续的，而 ${1,3}$ 不是连续的。</p><p>某天，小绿的顶头上司板老大，给了小绿 $T$ 个长度为 $n$ 的排列。小绿拿到之后十分欢喜，他求出了每个排列的每个区间是否是他所定义的“连续”的。然而，小绿觉得被别的“连续”区间包含住的“连续”区间不够优秀，于是对于每个排列的所有右端点相同的“连续”区间，他只记录下了长度最长的那个“连续”区间的长度。也就是说，对于板老大给他的每一个排列，他都只记录下了在这个排列中，对于每一个 $1 \le i \le n$，右端点为 $i$ 的最长“连续”区间的长度 $L_i$。显然这个长度最少为 $1$，因为所有长度为 $1$ 的整数序列都是连续的。</p><p>做完这一切后，小绿爬上绿色床，美美地做了一个绿色的梦。</p><p>可是第二天醒来之后，小绿惊讶的发现板老大给他的所有排列都不见了，只剩下他记录下来的 $T$ 组信息。小绿知道自己在劫难逃，但是作为一个好奇的青年，他还是想知道：对于每一组信息，有多少个和信息符合的长度为 $n$ 的排列。</p><p>由于小绿已经放弃治疗了，你只需要告诉他每一个答案对 $998244353$ 取模的结果。</p><p>我们并不保证一定存在至少一个符合信息的排列，因为小绿也是人，他也有可能犯错。</p></blockquote><p><strong>输入格式</strong></p><blockquote><p>输入的第一行包含两个整数 $T,n$，分别表示板老大给小绿的排列个数、以及每个排列的长度。</p><p>接下来 $T$ 行，每行描述一组信息，包含 $n$ 个正整数，第 $i$ 组信息的从左往右第 $j$ 个整数 $L_{i,j}$ 表示第 $i$ 个排列中右端点为第 $j$ 个数的最长“连续”区间的长度。</p><p>对于每一行，如果行内包含多个数，则用单个空格将它们隔开。</p></blockquote><p><strong>输出格式</strong></p><blockquote><p>对于每组信息，输出一行一个整数表示可能的排列个数对 $998244353$ 取模的结果。由于是计算机帮你算，所以我们不给你犯错的机会。</p></blockquote><p><strong>样例输入</strong></p><blockquote><p>5 10<br>1 1 1 1 1 6 1 1 1 2<br>1 1 1 3 1 1 1 1 1 10<br>1 1 1 1 1 1 7 1 1 10<br>1 1 1 1 1 1 1 1 1 10<br>1 1 1 1 1 1 1 7 9 10</p></blockquote><p><strong>样例输出</strong></p><blockquote><p>0<br>9600<br>2400<br>443296<br>2400</p></blockquote><p><strong>提示</strong></p><blockquote><table><thead><tr><th style="text-align:center">测试点编号</th><th style="text-align:center">$n\le$</th><th style="text-align:center">$T\le$</th><th style="text-align:center">特殊性质</th></tr></thead><tbody><tr><td style="text-align:center">1~2</td><td style="text-align:center">$10$</td><td style="text-align:center">1</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center">3~4</td><td style="text-align:center">$10$</td><td style="text-align:center">100</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">$300$</td><td style="text-align:center">1</td><td style="text-align:center">$ L_{i,j}=j$</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">$300$</td><td style="text-align:center">1</td><td style="text-align:center">$L_{i,j}=1$ 且 $j&lt;n$</td></tr><tr><td style="text-align:center">7~8</td><td style="text-align:center">$300$</td><td style="text-align:center">100</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">$1000$</td><td style="text-align:center">1</td><td style="text-align:center">$L_{i,j}=1$ 且 $j&lt;n$</td></tr><tr><td style="text-align:center">10~12</td><td style="text-align:center">$1000$</td><td style="text-align:center">100</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center">13~16</td><td style="text-align:center">$5000$</td><td style="text-align:center">100</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center">17~20</td><td style="text-align:center">$50000$</td><td style="text-align:center">100</td><td style="text-align:center">无</td></tr></tbody></table><p>对于所有测试数据，$1 \le T \le 100$，$1 \le N \le 50000$, $1 \le L_{i,j} \le j$。<br>本题部分测试点的输入规模较大，请注意读入效率。   </p></blockquote><hr><p>首先容易发现所有连续区间只存在相离和内含的关系，不会出现交叉，这个很容易证明</p><p>因此无解的条件就是最后一个数不为n，或区间出现了交叉</p><p>然后考虑有解的情况，容易发现如果将每个位置的极大连续区间看成一个点，那么每个区间向包含它的最小的区间连边之后会形成一棵树</p><p>对于根来说，每个子树都是一个编号连续的区间，然后如果将每个子树看成一个整体，即缩成一个点，那么只需要缩点后的序列满足不存在长度大于1的连续区间即可，这个缩点过程是可以递归的</p><p>因此最后只需要求解形如$1\ 1\ 1\ 1\ 1…n+1$的方案数，也就是特殊数据6和9，令其为$f[n]$</p><p>一般的，假设每个点的儿子个数分别是$D[1],D[2],…,D[n]$，那么答案就是$\Pi_{i=1}^{n}f[D[i]]$</p><p>计算$D$可以用单调栈简单解决，主要问题是求解$f[n]$，这个存在一个$O(n^3)/O(n^2)$的容斥解法，可以打表得到80分，然而并不能解决本题。</p><p>然后假设我们打了个表，$1,2,2,4,16,88,600,4800,43680,443296$，然后尝试寻找递推式。</p><p>反正我是没找到，翻了题解之后得到$f[n]=(n-1)f[n-1]+\sum_{i=2}^{n-2}(i-1)f[i]f[n-i]$</p><p>注意到$f[n]$的意思是长为$n+1$的序列，删去最后一位之后不存在长度大于1的连续区间的排列数</p><p>那么上面的递推式是什么意思呢</p><p>直接从这个定义去推很难解释，考虑一个满足条件的排列，$a_1,a_2,a_3,a_4$，那么我们将他置换一下，将$i$填到第$a_i$个位置上，即得到序列$b_{a_i}=i$</p><p>考虑新的排列满足的条件，那么$a_{n+1}$对应了$b_i$中的元素$n+1$，可以发现$b$序列满足：不存在不经过最大值的连续区间，证明比较简单，考虑$b_i$的连续区间在$a_i$中的位置即可。</p><p>并且$a$序列和$b$序列是一一对应的，因此可以转而计算满足不存在不经过最大值的连续区间的排列数</p><p>考虑从长为$n$的合法序列$p$中添加一个元素得到长为$n+1$的合法序列$q$</p><p>不妨认为$p$的编号从$2-n+1$，其方案数仍为$f[n-1]$，然后向其中添加一个最小值，只需要不与2相邻即可，因此有$n-1$种填法，因此总共有$(n-1)f[n-1]$种方案</p><p>再考虑从长为$n$的不合法序列$p$中添加一个元素得到长为$n+1$的合法序列$q$，依然考虑添加最小值</p><p>容易发现p中至多只能有一个不经过最大值的连续区间，那么枚举这个区间的长度$l(2&lt;=l&lt;=n-2)$，将这个连续区间视为整体后不能再存在不经过最大值的连续区间，方案数为$f[n-l]$</p><p>考虑这个连续区间的值域为$[x,x+l-1]$，那么因为加入一个元素1之后能够使得它不存在连续区间，那么$x&gt;2且x+l-1&lt;n+1$，那么合法的$x$有$n-l+1-3+1=n-l-1$个</p><p>再考虑这样的连续区间个数，由于1与这个区间的值域不相邻，因此加入1后不存在连续区间与加入$x+l$后不存在不经过最大值的连续区间等价，因此这样的区间数就是$f[l]$，并且可以认为插入方法唯一</p><p>因此这样可以得到的序列$q$的总数目就是$\sum_{i=2}^{n-2}(n-i-1)f[i]f[n-i]=\sum_{i=1}^{n-2}(i-1)f[i]f[n-i]$</p><p>那么上面的递推式得证。</p><p>然后这个递推式可以用分治$NTT$优化，处理的时候注意一下偏序关系和$NTT$的长度就行了。复杂度$O(n log^2 n)$</p><hr><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 300005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*p1,*p2;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC (p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,1,1&lt;&lt;20,stdin),p1==p2)?0:*p1++)</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _R(<span class="keyword">int</span> &amp;x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> t=GC;</span><br><span class="line"><span class="keyword">while</span>(t&lt;<span class="number">48</span>||t&gt;<span class="number">57</span>)t=GC;</span><br><span class="line"><span class="keyword">for</span>(x=<span class="number">0</span>;t&gt;<span class="number">47</span>&amp;&amp;t&lt;<span class="number">58</span>;t=GC)x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+t<span class="number">-48</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">998244353</span>,g=<span class="number">3</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;a+=b;<span class="keyword">return</span> a&gt;=mod?a-mod:a;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;a-=b;<span class="keyword">return</span> a&lt;<span class="number">0</span>?a+mod:a;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;<span class="keyword">return</span> <span class="number">1l</span>l*a*b%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ksm</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;<span class="keyword">int</span> o;<span class="keyword">for</span>(o=<span class="number">1</span>;b;b&gt;&gt;=<span class="number">1</span>,a=mul(a,a))<span class="keyword">if</span>(b&amp;<span class="number">1</span>)o=mul(o,a);<span class="keyword">return</span> o;&#125;</span><br><span class="line"><span class="keyword">int</span> ntt_wi[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NTT</span><span class="params">(<span class="keyword">int</span> C[],<span class="keyword">int</span> n,<span class="keyword">int</span> ty)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k,m,t0,t1;</span><br><span class="line"><span class="keyword">for</span>(i=j=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;j)swap(C[i],C[j]);</span><br><span class="line"><span class="keyword">for</span>(k=(n&gt;&gt;<span class="number">1</span>);(j^=k)&lt;k;k&gt;&gt;=<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">ntt_wi[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(m=<span class="number">1</span>;m&lt;n;m&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">t0=ksm(g,mod<span class="number">-1</span>+ty*(mod<span class="number">-1</span>)/(m&lt;&lt;<span class="number">1</span>));</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;m;i++)ntt_wi[i]=mul(ntt_wi[i<span class="number">-1</span>],t0);</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;n;k+=m&lt;&lt;<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span>(i=k;i&lt;k+m;i++)</span><br><span class="line">&#123;</span><br><span class="line">t0=C[i];t1=mul(C[i+m],ntt_wi[i-k]);</span><br><span class="line">C[i]=add(t0,t1);C[i+m]=sub(t0,t1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ty==<span class="number">1</span>)<span class="keyword">return</span>;t0=ksm(n,mod<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)C[i]=mul(C[i],t0);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> A[N],D[N],f[N],dc_A[N],dc_B[N],dc_C[N],S[N],top;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DC</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;f[l]=add(f[l],mul(f[l<span class="number">-1</span>],l<span class="number">-1</span>));<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>,i; </span><br><span class="line">DC(l,mid);</span><br><span class="line"><span class="keyword">if</span>(<span class="number">3</span>&lt;=l)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> lp=<span class="number">2</span>,rp=min(l<span class="number">-1</span>,r-l),L=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(L&lt;=rp+mid-l)L&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">fill(dc_A,dc_A+L,<span class="number">0</span>);</span><br><span class="line">fill(dc_B,dc_B+L,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(i=lp;i&lt;=rp;i++)dc_A[i]=f[i];</span><br><span class="line"><span class="keyword">for</span>(i=l;i&lt;=mid;i++)dc_B[i-l]=f[i];</span><br><span class="line">NTT(dc_A,L,<span class="number">1</span>);NTT(dc_B,L,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;L;i++)dc_C[i]=mul(dc_A[i],dc_B[i]);</span><br><span class="line">NTT(dc_C,L,<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(i=mid+<span class="number">1</span>;i&lt;=r;i++)<span class="keyword">if</span>(i&gt;=l)f[i]=add(f[i],mul(dc_C[i-l],i<span class="number">-2</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> L=<span class="number">1</span>;<span class="keyword">while</span>(L&lt;=mid-l+mid-l)L&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">fill(dc_A,dc_A+L,<span class="number">0</span>);</span><br><span class="line">fill(dc_B,dc_B+L,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(i=l;i&lt;=mid;i++)dc_A[i-l]=f[i];</span><br><span class="line"><span class="keyword">for</span>(i=l;i&lt;=mid;i++)dc_B[i-l]=mul(i<span class="number">-1</span>,f[i]);</span><br><span class="line">NTT(dc_A,L,<span class="number">1</span>);NTT(dc_B,L,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;L;i++)dc_C[i]=mul(dc_A[i],dc_B[i]);</span><br><span class="line">NTT(dc_C,L,<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(i=mid+<span class="number">1</span>;i&lt;=r;i++)<span class="keyword">if</span>(i&gt;=l+l)f[i]=add(f[i],dc_C[i-l-l]);</span><br><span class="line">DC(mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Solve</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k,ans=<span class="number">1</span>;top=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(A[n]!=n)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">S[++top]=n;</span><br><span class="line">fill(D,D+n+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(S[top]-A[S[top]]+<span class="number">1</span>&gt;i)top--;</span><br><span class="line"><span class="keyword">if</span>(i-A[i]&lt;S[top]-A[S[top]])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">D[S[top]]++;</span><br><span class="line"><span class="keyword">while</span>(top&amp;&amp;i-A[i]&lt;=S[top]-A[S[top]])top--;</span><br><span class="line">S[++top]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)ans=mul(ans,f[D[i]]);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T,n,i,j,k,x,y;</span><br><span class="line">_R(T);_R(n);</span><br><span class="line">f[<span class="number">0</span>]=<span class="number">1</span>;f[<span class="number">1</span>]=<span class="number">2</span>;DC(<span class="number">2</span>,n);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)_R(A[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Solve(n));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CTSC2018-青蕈领主&quot;&gt;&lt;a href=&quot;#CTSC2018-青蕈领主&quot; class=&quot;headerlink&quot; title=&quot;CTSC2018 青蕈领主&quot;&gt;&lt;/a&gt;CTSC2018 青蕈领主&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="数学" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="分治法" scheme="http://yoursite.com/categories/%E5%88%86%E6%B2%BB%E6%B3%95/"/>
    
      <category term="单调栈" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    
      <category term="CDQ分治" scheme="http://yoursite.com/categories/%E5%88%86%E6%B2%BB%E6%B3%95/CDQ%E5%88%86%E6%B2%BB/"/>
    
      <category term="NTT" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/NTT/"/>
    
    
      <category term="CDQ分治" scheme="http://yoursite.com/tags/CDQ%E5%88%86%E6%B2%BB/"/>
    
      <category term="NTT" scheme="http://yoursite.com/tags/NTT/"/>
    
  </entry>
  
  <entry>
    <title>AHOI/HNOI2018 毒瘤（动态规划）</title>
    <link href="http://yoursite.com/2018/05/03/AHOI-HNOI2018-%E6%AF%92%E7%98%A4%EF%BC%88%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%89/"/>
    <id>http://yoursite.com/2018/05/03/AHOI-HNOI2018-毒瘤（动态规划）/</id>
    <published>2018-05-03T01:34:18.000Z</published>
    <updated>2018-09-04T13:57:14.978Z</updated>
    
    <content type="html"><![CDATA[<h1 id="「AHOI-HNOI2018」毒瘤"><a href="#「AHOI-HNOI2018」毒瘤" class="headerlink" title="「AHOI / HNOI2018」毒瘤"></a>「AHOI / HNOI2018」毒瘤</h1><p><strong>问题描述</strong></p><blockquote><p>从前有一名毒瘤。</p><p>毒瘤最近发现了量产毒瘤题的奥秘。考虑如下类型的数据结构题：给出一个数组，要求支持若干种奇奇怪怪的修改操作（例如给一个区间内的数同时加上 $c$，或者将一个区间内的数同时开平方根），并且支持询问区间的和。毒瘤考虑了 $n$ 个这样的修改操作,并将它们编号为 $1 … n$。当毒瘤要出数据结构题的时候，他就将这些修改操作中选若干个出来，然后出成一道题。</p><p>当然了，这样出的题有可能不可做。通过精妙的数学推理，毒瘤揭露了这些修改操作之间的关系：有 $m$ 对“互相排斥”的修改操作，第 $i$ 对是第 $u_i$ 个操作和第 $v_i$ 个操作。当一道题中同时含有 $u_i$ 和 $v_i$ 这两个操作时，这道题就会变得不可做。另一方面，当一道题中不包含任何“互相排斥”的操作时，这个题就是可做的。此外，毒瘤还发现了一个规律：$m − n$ 是一个很小的数字（参见“数据范围”中的说明），且任意两个修改操作都是连通的。两个修改操作 $a, b$ 是连通的，当且仅当存在若干操作 $t_0, t_1, … , t_l$，使得 $t_0 = a,t l = b$，且对任意 $1 \le i \le l$，$t_{i−1}$ 和 $t_i$ 都是“互相排斥”的修改操作。</p><p>一对“互相排斥”的修改操作称为互斥对。现在毒瘤想知道，给定值 $n$ 和 $m$ 个互斥对，他一共能出出多少道可做的不同的数据结构题。两个数据结构题是不同的，当且仅当其中某个操作出现在了其中一个题中，但是没有出现在另一个题中。</p></blockquote><p><strong>输入格式</strong></p><blockquote><p>第一行为正整数 $n, m$。</p><p>接下来 $m$ 行，每行两个正整数 $u, v$，代表一对“互相排斥”的修改操作。</p></blockquote><p><strong>输出格式</strong></p><blockquote><p>输出一行一个整数，表示毒瘤可以出的可做的不同的数据结构题的个数。这个数可能很大，所以只输出模 $998244353$ 后的值。</p></blockquote><p><strong>样例输入</strong></p><blockquote><p>3 2<br>1 2<br>2 3</p></blockquote><p><strong>样例输出</strong></p><blockquote><p>5</p></blockquote><p><strong>提示</strong></p><blockquote><p><img src="\images\0503-HNOI2018-4.png" alt=""></p></blockquote><hr><p>出题人说的很好</p><p><img src="\images\0503-HNOI2018-3.png" alt=""></p><p>貌似还可以虚树上来搞，意思差不多，也是处理系数。</p><hr><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*p1,*p2;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC (p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,1,1000000,stdin),p1==p2)?0:*p1++)</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _R(<span class="keyword">int</span> &amp;x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> t=GC;</span><br><span class="line"><span class="keyword">while</span>(t&lt;<span class="number">48</span>||t&gt;<span class="number">57</span>)t=GC;</span><br><span class="line"><span class="keyword">for</span>(x=<span class="number">0</span>;t&gt;<span class="number">47</span>&amp;t&lt;<span class="number">58</span>;t=GC)x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+t<span class="number">-48</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;a+=b;<span class="keyword">return</span> a&gt;=mod?a-mod:a;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;a-=b;<span class="keyword">return</span> a&lt;<span class="number">0</span>?a+mod:a;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;<span class="keyword">return</span> <span class="number">1l</span>l*a*b%mod;&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">2</span>];&#125;I,tmp;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> u,v;edge val;&#125;G[N];</span><br><span class="line"><span class="keyword">int</span> n,m,deg[N],c[N][<span class="number">2</span>],id[N],V[N],totv,tote;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,edge&gt;E[N];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,edge&gt;::iterator it;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;Q;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> i,j,k,x,y,ans=<span class="number">0</span>;</span><br><span class="line">I.a[<span class="number">0</span>][<span class="number">0</span>]=I.a[<span class="number">1</span>][<span class="number">0</span>]=I.a[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">_R(n);_R(m);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)c[i][<span class="number">0</span>]=c[i][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">&#123;</span><br><span class="line">_R(x);_R(y);</span><br><span class="line">++deg[x];E[x][y]=I;</span><br><span class="line">++deg[y];E[y][x]=I;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)<span class="keyword">if</span>(deg[i]==<span class="number">1</span>||deg[i]==<span class="number">2</span>)Q.push(i);</span><br><span class="line"><span class="keyword">while</span>(Q.size())</span><br><span class="line">&#123;</span><br><span class="line">x=Q.front();Q.pop();</span><br><span class="line"><span class="keyword">if</span>(deg[x]==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">y=(*E[x].begin()).first;</span><br><span class="line">tmp=(*E[x].begin()).second;</span><br><span class="line">E[y].erase(x);</span><br><span class="line">c[y][<span class="number">0</span>]=mul(c[y][<span class="number">0</span>],add(mul(tmp.a[<span class="number">0</span>][<span class="number">0</span>],c[x][<span class="number">0</span>]),mul(tmp.a[<span class="number">1</span>][<span class="number">0</span>],c[x][<span class="number">1</span>])));</span><br><span class="line">c[y][<span class="number">1</span>]=mul(c[y][<span class="number">1</span>],add(mul(tmp.a[<span class="number">0</span>][<span class="number">1</span>],c[x][<span class="number">0</span>]),mul(tmp.a[<span class="number">1</span>][<span class="number">1</span>],c[x][<span class="number">1</span>])));</span><br><span class="line"><span class="keyword">if</span>(--deg[y]==<span class="number">2</span>)Q.push(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(deg[x]==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> p1,p2;edge e1,e2;</span><br><span class="line">it=E[x].begin();</span><br><span class="line">p1=(*it).first;e1=(*it).second;++it;</span><br><span class="line">p2=(*it).first;e2=(*it).second;</span><br><span class="line">E[p1].erase(x);E[p2].erase(x);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">2</span>;j++)tmp.a[i][j]=add(mul(c[x][<span class="number">0</span>],mul(e1.a[<span class="number">0</span>][i],e2.a[<span class="number">0</span>][j])),mul(c[x][<span class="number">1</span>],mul(e1.a[<span class="number">1</span>][i],e2.a[<span class="number">1</span>][j])));</span><br><span class="line"><span class="keyword">if</span>(E[p1].count(p2))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">2</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line">E[p1][p2].a[i][j]=mul(E[p1][p2].a[i][j],tmp.a[i][j]);</span><br><span class="line">E[p2][p1].a[i][j]=mul(E[p2][p1].a[i][j],tmp.a[j][i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(--deg[p1]==<span class="number">2</span>)Q.push(p1);</span><br><span class="line"><span class="keyword">if</span>(--deg[p2]==<span class="number">2</span>)Q.push(p2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">E[p1][p2]=tmp;</span><br><span class="line">swap(tmp.a[<span class="number">0</span>][<span class="number">1</span>],tmp.a[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">E[p2][p1]=tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="keyword">if</span>(deg[i]!=<span class="number">1</span>&amp;&amp;deg[i]!=<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">V[id[i]=++totv]=i;</span><br><span class="line"><span class="keyword">for</span>(it=E[i].begin();it!=E[i].end();++it)</span><br><span class="line"><span class="keyword">if</span>((*it).first&gt;i)G[++tote]=(Edge)&#123;i,(*it).first,(*it).second&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;(<span class="number">1</span>&lt;&lt;totv);++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=totv;++j)res=mul(res,c[V[j]][i&gt;&gt;j<span class="number">-1</span>&amp;<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=tote;++j)res=mul(res,G[j].val.a[i&gt;&gt;id[G[j].u]<span class="number">-1</span>&amp;<span class="number">1</span>][i&gt;&gt;id[G[j].v]<span class="number">-1</span>&amp;<span class="number">1</span>]);</span><br><span class="line">ans=add(ans,res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;「AHOI-HNOI2018」毒瘤&quot;&gt;&lt;a href=&quot;#「AHOI-HNOI2018」毒瘤&quot; class=&quot;headerlink&quot; title=&quot;「AHOI / HNOI2018」毒瘤&quot;&gt;&lt;/a&gt;「AHOI / HNOI2018」毒瘤&lt;/h1&gt;&lt;p&gt;&lt;stron
      
    
    </summary>
    
      <category term="动态规划" scheme="http://yoursite.com/categories/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="神仙dp" scheme="http://yoursite.com/categories/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%A5%9E%E4%BB%99dp/"/>
    
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>AHOI/HNOI2018 转盘（线段树）</title>
    <link href="http://yoursite.com/2018/05/03/AHOI-HNOI2018-%E8%BD%AC%E7%9B%98%EF%BC%88%E7%BA%BF%E6%AE%B5%E6%A0%91%EF%BC%89/"/>
    <id>http://yoursite.com/2018/05/03/AHOI-HNOI2018-转盘（线段树）/</id>
    <published>2018-05-03T00:58:37.000Z</published>
    <updated>2018-09-04T13:57:14.978Z</updated>
    
    <content type="html"><![CDATA[<h1 id="「AHOI-HNOI2018」转盘"><a href="#「AHOI-HNOI2018」转盘" class="headerlink" title="「AHOI / HNOI2018」转盘"></a>「AHOI / HNOI2018」转盘</h1><p><strong>问题描述</strong></p><blockquote><p>一次小 G 和小 H 原本准备去聚餐，但由于太麻烦了于是题面简化如下：</p><p>一个转盘上有摆成一圈的 $n$ 个物品（编号 $1$ 至 $n$）其中第 $i$ 个物品会在 $T_i$ 时刻出现。</p><p>在 $0$ 时刻时,小 G 可以任选 $n$ 个物品中的一个，我们将其编号记为 $s_0$ 。并且如果 $i$ 时刻选择了物品 $s_i$ ，那么 $i + 1$ 时刻可以继续选择当前物品或者选择下一个物品。当 $s_i$ 为 $n$ 时，下一个物品为物品 $1$，否则下一个物品为 $s_{i + 1}$。在每一时刻（包括 $0$ 时刻），如果小 G 所选择的物品已经出现了，那么小 G 将会标记它。小 H 想知道，在物品选择的最优策略下，小 G 什么时候能标记所有物品？</p><p>但麻烦的是，物品的出现时间会不时修改。我们将其描述为 $m$ 次修改，每次修改将改变其中一个物品的出现时间。每次修改之后，你也需要求出当前局面的答案。对于其中部分测试点，小 H 还追加了强制在线的要求。</p></blockquote><p><strong>输入格式</strong></p><blockquote><p>第一行三个非负整数 $n,m,p$，代表一共有 $n$ 个物品，$m$ 次修改。$p$ 只有 $0$ 或 $1$ 两种取值，强制在线时 $p$ 为 $1$，否则为 $0$。本节后面将解释如何使用 $p$。</p><p>接下来一行，有 $n$ 个用空格隔开的非负整数，第 $i$ 个数 $T_i$ 代表物品 $i$ 的出现时间。</p><p>接下来 $m$ 行，每行两个非负整数 $x,y$，代表一次修改及询问。修改方式如下：</p><ul><li>如果 $p = 0$，则表示物品 $x$ 的出现时间 $T_x$ 修改为 $y$。</li><li>如果 $p = 1$，则先将 $x$ 和 $y$ 分别异或 $LastAns$ 得到 $x′$ 和 $y′$：即 $x′ = x \oplus LastAns, y′ = y \oplus LastAns$。然后将物品 $x′$ 的出现时间 $T_{x′}$ 修改为 $y′$ 。其中的 $LastAns$ 是前一个询问的答案；特别的，第一次修改时的 $LastAns$ 为初始局面的答案。其中的 $\oplus$ 为按位异或运算，例如 $1 \oplus 2 = 3,4 \oplus 5 = 1,6 \oplus 11 = 13$。</li></ul><p>保证输入合法。</p></blockquote><p><strong>输出格式</strong></p><blockquote><p>第一行一个整数代表初始局面的答案。</p><p>接下来 $m + 1$ 行每行一个整数分别代表每次修改后的答案。</p></blockquote><p><strong>样例输入</strong></p><blockquote><p>5 3 0<br>1 2 3 4 5<br>3 5<br>5 0<br>1 4</p></blockquote><p><strong>样例输出</strong></p><blockquote><p>5<br>7<br>6<br>7</p></blockquote><p><strong>提示</strong></p><blockquote><p><img src="\images\0503-HNOI2018-2.png" alt=""></p></blockquote><hr><p>首先可以发现一定存在一种最优解是从某个点开始，等一段时间，然后一步不停的走完一圈。</p><p>那么将序列倍长，我们要求的答案即是$Min_{i=1}^{n}{Max_{j=i}^{2n}{T_j-j+i+n-1}}$</p><p>化简一下得到$Min_{i=1}^{n}{Max_{j=i}^{2n}{T_j-j}+i}+n-1$，考虑用线段树来维护。</p><p>每个节点上分别维护$Max$和$Min$，其中$Max=Max_{j=l}^{r}{T_j-j}$，$Min=Min_{i=l}^{mid}{Max_{j=i}^{r}{T_j-j}+i}$</p><p>Max很容易维护，主要考虑维护Min</p><p>可以通过一个查询$Query(l,mid,Rmax)$来实现这一点，每次比较一下右儿子的$Max$和$Rmax$的大小关系，如果$Max&gt;=Rmax$那么返回左儿子的$Min$与右儿子查询的结果的较小者。否则返回左儿子查询结果与$mid+1$处答案的较小者。</p><p>这样做的时间复杂度是$O(n \log^2 n)$，可以接受。</p><hr><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*p1,*p2;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC (p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,1,1000000,stdin),p1==p2)?0:*p1++)</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _R(<span class="keyword">int</span> &amp;x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> t=GC;</span><br><span class="line"><span class="keyword">while</span>(t&lt;<span class="number">48</span>||t&gt;<span class="number">57</span>)t=GC;</span><br><span class="line"><span class="keyword">for</span>(x=<span class="number">0</span>;t&gt;<span class="number">47</span>&amp;t&lt;<span class="number">58</span>;t=GC)x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+t<span class="number">-48</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m,ty,T[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">node *ls,*rs;</span><br><span class="line"><span class="keyword">int</span> Max,Min;</span><br><span class="line">&#125;Seg[N&lt;&lt;<span class="number">2</span>],*rt,*tl,*null;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">rt=tl=null=&amp;Seg[<span class="number">0</span>];</span><br><span class="line">null-&gt;ls=null-&gt;rs=null;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GM</span><span class="params">(node *p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> l+max(k,p-&gt;Max);</span><br><span class="line"><span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(k&gt;=p-&gt;rs-&gt;Max)<span class="keyword">return</span> min(mid+<span class="number">1</span>+k,GM(p-&gt;ls,l,mid,k));</span><br><span class="line"><span class="keyword">return</span> min(p-&gt;Min,GM(p-&gt;rs,mid+<span class="number">1</span>,r,k));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MT</span><span class="params">(node *p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">p-&gt;Max=max(p-&gt;ls-&gt;Max,p-&gt;rs-&gt;Max);</span><br><span class="line">p-&gt;Min=GM(p-&gt;ls,l,l+r&gt;&gt;<span class="number">1</span>,p-&gt;rs-&gt;Max);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MD</span><span class="params">(node *p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;p-&gt;Max=T[l]-l;p-&gt;Min=T[l];<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(k&lt;=mid)MD(p-&gt;ls,l,mid,k);</span><br><span class="line"><span class="keyword">else</span> MD(p-&gt;rs,mid+<span class="number">1</span>,r,k);</span><br><span class="line">MT(p,l,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BT</span><span class="params">(node *&amp;p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">p=++tl;p-&gt;ls=p-&gt;rs=null;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;p-&gt;Max=T[l]-l;p-&gt;Min=T[l];<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">BT(p-&gt;ls,l,mid);</span><br><span class="line">BT(p-&gt;rs,mid+<span class="number">1</span>,r);</span><br><span class="line">MT(p,l,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k,x,y,ans;</span><br><span class="line">_R(n);_R(m);_R(ty);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)_R(T[i]),T[i+n]=T[i];</span><br><span class="line">Init();BT(rt,<span class="number">1</span>,n+n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans=rt-&gt;Min+n<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line">_R(x);_R(y);</span><br><span class="line">x^=ty*ans;y^=ty*ans;</span><br><span class="line">T[x]=T[x+n]=y;</span><br><span class="line">MD(rt,<span class="number">1</span>,n+n,x);</span><br><span class="line">MD(rt,<span class="number">1</span>,n+n,x+n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans=rt-&gt;Min+n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;「AHOI-HNOI2018」转盘&quot;&gt;&lt;a href=&quot;#「AHOI-HNOI2018」转盘&quot; class=&quot;headerlink&quot; title=&quot;「AHOI / HNOI2018」转盘&quot;&gt;&lt;/a&gt;「AHOI / HNOI2018」转盘&lt;/h1&gt;&lt;p&gt;&lt;stron
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="线段树" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>AHOI/HNOI2018 寻宝游戏（乱搞）</title>
    <link href="http://yoursite.com/2018/05/03/AHOI-HNOI2018-%E5%AF%BB%E5%AE%9D%E6%B8%B8%E6%88%8F%EF%BC%88%E4%B9%B1%E6%90%9E%EF%BC%89/"/>
    <id>http://yoursite.com/2018/05/03/AHOI-HNOI2018-寻宝游戏（乱搞）/</id>
    <published>2018-05-03T00:48:39.000Z</published>
    <updated>2018-09-04T13:57:14.978Z</updated>
    
    <content type="html"><![CDATA[<h1 id="「AHOI-HNOI2018」寻宝游戏"><a href="#「AHOI-HNOI2018」寻宝游戏" class="headerlink" title="「AHOI / HNOI2018」寻宝游戏"></a>「AHOI / HNOI2018」寻宝游戏</h1><p><strong>问题描述</strong></p><blockquote><p>某大学每年都会有一次 Mystery Hunt 的活动，玩家需要根据设置的线索解谜，找到宝藏的位置，前一年获胜的队伍可以获得这一年出题的机会。</p><p>作为新生的你对这个活动非常感兴趣。你每天都要从西向东经过教学楼一条很长的走廊，这条走廊是如此的长，以至于它被人戏称为 infinite corridor。一次，你经过这条走廊的时，注意到在走廊的墙壁上隐藏着 $n$ 个等长的二进制的数字，长度均为 $m$。你从西向东将这些数字记录了下来，形成一个含有 $n$ 个数的二进制数组 $a_1, a_2, …, a_n$。很快，在最新的一期 Voo Doo 杂志上，你发现了 $q$ 个长度也为 $m$ 的二进制串 $r_1, r_2, …, r_q$。聪明的你很快发现了这些数字的含义。保持数组 $a_1, a_2, …, a_n$ 的元素顺序不变,你可以在它们之间插入 $\wedge$（按位与运算）或者 $\vee$（按位或运算）两种二进制运算符。例如：$11011 \wedge 00111=00011,11011 \vee 00111=11111$。</p><p>你需要插入恰好 $n$ 个运算符,相邻两个数之间恰好一个，在第一个数的左边还有一个。如果我们在第一个运算符的左边补入一个 $0$，这就形成了一个运算式，我们可以计算它的值。与往常一样,运算顺序是从左往右。有趣的是,出题人已经告诉你这个值的可能的集合——Voo Doo 杂志里的那一些二进制数 $r_1, r_2, …, r_q$，而解谜的方法,就是对 $r_1, r_2, …, r_q$ 中的每一个值 $r_i$，分别计算出有多少种方法填入这 $n$ 个运算符,使得这个运算式的值是 $r_i$ 。然而，infinite corridor 真的很长，这意味着数据范围可能非常大。因此，答案也可能非常大，但是你发现由于谜题的特殊性，你只需要求答案模 $1000000007$ （$10^9 + 7$，一个质数）的值。</p></blockquote><p><strong>输入格式</strong></p><blockquote><p>第一行三个数 $n, m, q$，含义如题所述。</p><p>接下来 $n$ 行，其中第 $i$ 行有一个长度为 $m$ 的二进制串，左边是最高位，表示 $a_i$ 。</p><p>接下来 $q$ 行，其中第 $i$ 行有一个长度为 $m$ 的二进制串，左边是最高位，表示 $r_i$ 。</p></blockquote><p><strong>输出格式</strong></p><blockquote><p>输出 $q$ 行，每行一个数,其中第 $i$ 行表示对应于 $r_i$ 的答案。</p></blockquote><p><strong>样例输入</strong></p><blockquote><p>5 5 1<br>01110<br>11011<br>10000<br>01010<br>00100<br>00100</p></blockquote><p><strong>样例输出</strong></p><blockquote><p>6</p></blockquote><p><strong>提示</strong></p><blockquote><p>对于 $10\%$ 的数据，$n \le 20, m \le 30$，$q = 1$</p><p>对于另外 $20\%$ 的数据，$n \le 1000$，$m \le 16$</p><p>对于另外 $40\%$ 的数据，$n \le 500$，$m \le 1000$</p><p>对于 $100\%$ 的数据，$1 \le n \le 1000$，$1 \le m \le 5000$，$1 \le q \le 1000$</p></blockquote><hr><p>这题考验人类智慧。</p><p>按位考虑操作后的结果，把每一列压成一个二进制数$b_i$，最下面是最高位。</p><p>然后把操作序列也压成一个二进制数$x$，$\&amp;$为1，$|$为0，同样最后的操作是最高位。这样做了之后，发现第$i$为1当且仅当$x&lt;b_i$</p><p>那么就可以确定$x$的取值范围了，为了方便，将$b_i$排序，然后分别找到$x$的上界和下界，答案就是$b_{up}-b_{low}$</p><hr><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;a+=b;<span class="keyword">return</span> a&gt;=mod?a-mod:a;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;a-=b;<span class="keyword">return</span> a&lt;<span class="number">0</span>?a+mod:a;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;<span class="keyword">return</span> <span class="number">1l</span>l*a*b%mod;&#125;</span><br><span class="line"><span class="keyword">int</span> n,m,q,Rank[<span class="number">5005</span>],val[<span class="number">5005</span>],pow2[<span class="number">1005</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="keyword">int</span> id;<span class="keyword">char</span> s[<span class="number">1005</span>];&#125;B[<span class="number">5005</span>];</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(node a,node b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line"><span class="keyword">if</span>(a.s[i]!=b.s[i])<span class="keyword">return</span> a.s[i]&lt;b.s[i];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1005</span>][<span class="number">5005</span>],s0[<span class="number">5005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get</span><span class="params">(<span class="keyword">char</span> t[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">if</span>(t[i]==<span class="string">'1'</span>)ans=add(ans,pow2[i<span class="number">-1</span>]);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k,Max,Min;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;q);</span><br><span class="line">pow2[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)pow2[i]=mul(<span class="number">2</span>,pow2[i<span class="number">-1</span>]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%s"</span>,&amp;s[i][<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=m;j++)B[j].s[i]=s[i][j];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)B[i].id=i;</span><br><span class="line">sort(B+<span class="number">1</span>,B+m+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)val[i]=Get(B[i].s);</span><br><span class="line">val[m+<span class="number">1</span>]=pow2[n];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)Rank[B[i].id]=i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,&amp;s0[<span class="number">1</span>]);</span><br><span class="line">Max=<span class="number">0</span>;Min=m+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s0[j]==<span class="string">'1'</span>)Min=min(Min,Rank[j]);</span><br><span class="line"><span class="keyword">else</span> Max=max(Max,Rank[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(Max&gt;=Min)<span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sub(val[Min],val[Max]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;「AHOI-HNOI2018」寻宝游戏&quot;&gt;&lt;a href=&quot;#「AHOI-HNOI2018」寻宝游戏&quot; class=&quot;headerlink&quot; title=&quot;「AHOI / HNOI2018」寻宝游戏&quot;&gt;&lt;/a&gt;「AHOI / HNOI2018」寻宝游戏&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="乱搞" scheme="http://yoursite.com/categories/%E4%B9%B1%E6%90%9E/"/>
    
    
      <category term="杂题" scheme="http://yoursite.com/tags/%E6%9D%82%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>AHOI/HNOI2018 道路（树形dp）</title>
    <link href="http://yoursite.com/2018/05/03/AHOI-HNOI2018-%E9%81%93%E8%B7%AF%EF%BC%88%E6%A0%91%E5%BD%A2dp%EF%BC%89/"/>
    <id>http://yoursite.com/2018/05/03/AHOI-HNOI2018-道路（树形dp）/</id>
    <published>2018-05-03T00:39:56.000Z</published>
    <updated>2018-09-04T13:57:14.978Z</updated>
    
    <content type="html"><![CDATA[<h1 id="「AHOI-HNOI2018」道路"><a href="#「AHOI-HNOI2018」道路" class="headerlink" title="「AHOI/HNOI2018」道路"></a>「AHOI/HNOI2018」道路</h1><p><strong>问题描述</strong></p><blockquote><p>W 国的交通呈一棵树的形状。W 国一共有 $n − 1$ 个城市和 $n$ 个乡村，其中城市从 $1$ 到 $n − 1$ 编号，乡村从 $1$ 到 $n$ 编号，且 $1$ 号城市是首都。道路都是单向的，本题中我们只考虑从乡村通往首都的道路网络。对于每一个城市，恰有一条公路和一条铁路通向这座城市。对于城市 $i$，通向该城市的道路（公路或铁路）的起点，要么是一个乡村，要么是一个编号比 $i$ 大的城市。没有道路通向任何乡村。除了首都以外，从任何城市或乡村出发只有一条道路；首都没有往<br>外的道路。从任何乡村出发，沿着唯一往外的道路走，总可以到达首都。</p><p>W 国的国王小 W 获得了一笔资金，他决定用这笔资金来改善交通。由于资金有限，小 W 只能翻修 $n − 1$ 条道路。小 W 决定对每个城市翻修恰好一条通向它的道路，即从公路和铁路中选择一条并进行翻修。小 W 希望从乡村通向城市可以尽可能地便利，于是根据人口调查的数据，小 W 对每个乡村制定了三个参数，编号为 $i$ 的乡村的三个参数是 $a_i$，$b_i$ 和 $c_i$。假设从编号为 $i$ 的乡村走到首都一共需要经过 $x$ 条未翻修的公路与 $y$ 条未翻修的铁路，那么该乡村的不便利值为<br>$$<br>c_i \cdot (ai + x) \cdot (bi + y)<br>$$<br>在给定的翻修方案下，每个乡村的不便利值相加的和为该翻修方案的不便利值。</p><p>翻修 $n − 1$ 条道路有很多方案，其中不便利值最小的方案称为最优翻修方案，小 W 自然希望找到最优翻修方案，请你帮助他求出这个最优翻修方案的不便利值。</p></blockquote><p><strong>输入格式</strong></p><blockquote><p>第一行为正整数 $n$。<br>接下来 $n − 1$ 行，每行描述一个城市。其中第 $i$ 行包含两个数 $s_i, t_i$。$s_i$ 表示通向第 $i$ 座城市的公路的起点，$t_i$ 表示通向第 $i$ 座城市的铁路的起点。如果 $s_i &gt; 0$，那么存在一条从第 $s_i$ 座城市通往第 $i$ 座城市的公路，否则存在一条从第 $-s_i$ 个乡村通往第 $i$ 座城市的公路；$t_i$ 类似地，如果 $t_i &gt; 0$，那么存在一条从第 $t_i$ 座城市通往第 $i$ 座城市的铁路，否则存在一条从第 $-t_i$ 个乡村通往第 $i$ 座城市的铁路。</p><p>接下来 $n$ 行，每行描述一个乡村。其中第 $i$ 行包含三个数 $a_i, b_i, c_i$，其意义如题面所示。</p></blockquote><p><strong>输出格式</strong></p><blockquote><p>输出一行一个整数，表示最优翻修方案的不便利值。</p></blockquote><p><strong>样例输入</strong></p><blockquote><p>6<br>2 3<br>4 5<br>-1 -2<br>-3 -4<br>-5 -6<br>1 2 3<br>1 3 2<br>2 1 3<br>2 3 1<br>3 1 2<br>3 2 1</p></blockquote><p><strong>样例输出</strong></p><blockquote><p>54</p></blockquote><p><strong>提示</strong></p><blockquote><p>共 $20$ 组数据，编号为 $1 ∼ 20$。</p><p>对于编号 $\le 4$ 的数据，$n \le 20$；</p><p>对于编号为 $5 ∼ 8$ 的数据，$a_i, b_i, c_i \le 5，n \le 50$；</p><p>对于编号为 $9 ∼ 12$ 的数据，$n \le 2000$；</p><p>对于所有的数据，$n \le 20000$，$1 \le a_i, b_i \le 60$，$1 \le c_i \le 10^9$，$s_i, t_i$ 是 $[−n, −1] \cap (i, n − 1]$ 内的整数，任意乡村可以通过不超过 $40$ 条道路到达首都。</p></blockquote><hr><p>挺裸的dp，令$f[i][x][y]$表示从根节点到$i$，翻修了$x$条公路，$y$条铁路，然后直接dp算一算就行了。注意到题目中的深度限制，因此可以每个深度开一个dp数组来优化空间。还可以直接定二维状态算。</p><hr><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 40010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,ls[N],rs[N],a[N],b[N],c[N];</span><br><span class="line">ll f[<span class="number">44</span>][<span class="number">44</span>][<span class="number">44</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&gt;=n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=d;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=d-i;j++)f[d][i][j]=<span class="number">1l</span>l*c[x-n+<span class="number">1</span>]*(a[x-n+<span class="number">1</span>]+i)*(b[x-n+<span class="number">1</span>]+j);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">DP(ls[x],d+<span class="number">1</span>);ll g[<span class="number">44</span>][<span class="number">44</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=d+<span class="number">1</span>;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=d+<span class="number">1</span>-i;j++)g[i][j]=f[d+<span class="number">1</span>][i][j];</span><br><span class="line">DP(rs[x],d+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=d;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=d-i;j++)f[d][i][j]=min(g[i+<span class="number">1</span>][j]+f[d+<span class="number">1</span>][i][j],g[i][j]+f[d+<span class="number">1</span>][i][j+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k,x,y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span>)x=n<span class="number">-1</span>-x;</span><br><span class="line"><span class="keyword">if</span>(y&lt;<span class="number">0</span>)y=n<span class="number">-1</span>-y;</span><br><span class="line">ls[i]=x;rs[i]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a[i],&amp;b[i],&amp;c[i]);</span><br><span class="line">DP(<span class="number">1</span>,<span class="number">0</span>);<span class="built_in">printf</span>(<span class="string">"%lld"</span>,f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;「AHOI-HNOI2018」道路&quot;&gt;&lt;a href=&quot;#「AHOI-HNOI2018」道路&quot; class=&quot;headerlink&quot; title=&quot;「AHOI/HNOI2018」道路&quot;&gt;&lt;/a&gt;「AHOI/HNOI2018」道路&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;问题
      
    
    </summary>
    
      <category term="动态规划" scheme="http://yoursite.com/categories/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="树形dp" scheme="http://yoursite.com/categories/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%A0%91%E5%BD%A2dp/"/>
    
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>AHOI/HNOI2018 排列（贪心+堆）</title>
    <link href="http://yoursite.com/2018/05/03/AHOI-HNOI2018-%E6%8E%92%E5%88%97%EF%BC%88%E8%B4%AA%E5%BF%83-%E5%A0%86%EF%BC%89/"/>
    <id>http://yoursite.com/2018/05/03/AHOI-HNOI2018-排列（贪心-堆）/</id>
    <published>2018-05-03T00:24:41.000Z</published>
    <updated>2018-09-04T13:57:14.978Z</updated>
    
    <content type="html"><![CDATA[<h1 id="「AHOI-HNOI2018」排列"><a href="#「AHOI-HNOI2018」排列" class="headerlink" title="「AHOI / HNOI2018」排列"></a>「AHOI / HNOI2018」排列</h1><p><strong>问题描述</strong></p><blockquote><p>给定 $n$ 个整数 $a_1, a_2, …, a_n(0 \le a_i \le n)$，以及 $n$ 个整数 $w_1, w_2, …, w_n$。称 $a_1, a_2, …, a_n$ 的一个排列 $a_{p[1]}, a_{p[2]}, …, a_{p[n]}$ 为 $a_1, a_2, …, a_n$ 的一个合法排列，当且仅当该排列满足：对于任意的 $k$ 和任意的 $j$，如果 $j \le k$，那么 $a_{p[j]}$ 不等于 $p[k]$。（换句话说就是：对于任意的 $k$ 和任意的 $j$，如果 $p[k]$ 等于 $a_{p[j]}$，那么 $k&lt;j$。）</p><p>定义这个合法排列的权值为 $w_{p[1]} + 2w_{p[2]} + … + nw_{p[n]}$。你需要求出在所有合法排列中的最大权值。如果不存在合法排列，输出 $-1$。</p><p>样例解释中给出了合法排列和非法排列的实例。</p></blockquote><p><strong>输入格式</strong></p><blockquote><p>第一行一个整数 $n$。</p><p>接下来一行 $n$ 个整数，表示 $a_1,a_2,…, a_n$。</p><p>接下来一行 $n$ 个整数，表示 $w_1,w_2,…,w_n$。</p></blockquote><p><strong>输出格式</strong></p><blockquote><p>输出一个整数表示答案。</p></blockquote><p><strong>样例输入</strong> </p><blockquote><p>3<br>0 1 1<br>5 7 3</p></blockquote><p><strong>样例输出</strong> </p><blockquote><p>32</p></blockquote><p><strong>提示</strong></p><blockquote><p>对于前 $20\%$ 的数据，$1 \le n \le 10$；</p><p>对于前 $40\%$ 的数据，$1 \le n \le 15$；</p><p>对于前 $60\%$ 的数据，$1 \le n \le 1000$；</p><p>对于前 $80\%$ 的数据，$1 \le n \le 100000$；</p><p>对于 $100\%$ 的数据，$1 \le n \le 500000$，$0 \le a_i \le n (1 \le i \le n)$，$1 \le w_i \le 10^9$ ，所有 $w_i$ 的和不超过 $1.5 \times 10^{13}$。</p></blockquote><hr><p>弄清楚题意后发现，题目要求的就是$a_{a_i}$在新排列中必须在$a_i$之前，那么我们从$i\rightarrow a_i$连边，这样的话就变成一颗以0为根的树，那么要求就是必须先选父亲才能选儿子。</p><p>要求权值最大等价于先选权值小的，那么考虑全局最小值优先选。如果当前全局最小值的父亲为0，那么直接选。</p><p>否则它一定在选了父亲之后第一个选，因此可以将它和它的父亲缩到一起，考虑缩点后的权值是多少，这里比较巧妙，实际上权值给成$\frac{\sum w_i}{size}$就是对的，具体证明我们考虑假如先选缩点后的$(a_1,a_2,…,a_k)$比先选$a_{k+1},…,a_n$优，那么意味着</p><p>$$<br>a_1+2a_2+…+ka_k+(k+1)a_{k+1}+…+na_n \geq a_{k+1}+…+(n-k)a_n+(n-k+1)a_1+…+na_k<br>$$<br>那么移项就得到</p><p>$$<br>(n-k)(a_1+a_2+…+a_k)\leq k(a_{k+1}+…+a_n)<br>$$<br>那么容易发现这样做是对的。因此只需要用并查集+堆来维护就行了。</p><hr><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 500005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*p1,*p2;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC (p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,1,1000000,stdin),p1==p2)?0:*p1++)</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _R(<span class="keyword">int</span> &amp;x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> t=GC;</span><br><span class="line"><span class="keyword">while</span>(t&lt;<span class="number">48</span>||t&gt;<span class="number">57</span>)t=GC;</span><br><span class="line"><span class="keyword">for</span>(x=<span class="number">0</span>;t&gt;<span class="number">47</span>&amp;&amp;t&lt;<span class="number">58</span>;t=GC)x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+t<span class="number">-48</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span>ll v;<span class="keyword">int</span> s,x;&#125;;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(node a,node b)&#123;<span class="keyword">return</span> a.v*b.s&gt;b.v*a.s;&#125;</span><br><span class="line"><span class="keyword">int</span> n,a[N],fa[N],si[N];</span><br><span class="line">ll sum[N],ans;</span><br><span class="line">priority_queue&lt;node&gt;Q;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gf</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x==fa[x]?x:fa[x]=gf(fa[x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> i,j,k,x,y,fx,fy;_R(n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=n;i++)fa[i]=i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">_R(a[i]);</span><br><span class="line">fx=gf(i);fy=gf(a[i]);</span><br><span class="line"><span class="keyword">if</span>(fx==fy)<span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"-1"</span>),<span class="number">0</span>;</span><br><span class="line">fa[fx]=fy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)_R(x),sum[i]=x;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=n;i++)si[i]=<span class="number">1</span>,fa[i]=i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)Q.push((node)&#123;sum[i],si[i],i&#125;);</span><br><span class="line"><span class="keyword">while</span>(Q.size())</span><br><span class="line">&#123;</span><br><span class="line">node tmp=Q.top();</span><br><span class="line">Q.pop();</span><br><span class="line"><span class="keyword">if</span>(tmp.s!=si[tmp.x])<span class="keyword">continue</span>;</span><br><span class="line">fx=gf(a[tmp.x]);</span><br><span class="line">ans+=tmp.v*si[fx];</span><br><span class="line">fa[tmp.x]=fx;</span><br><span class="line">si[fx]+=tmp.s;</span><br><span class="line">sum[fx]+=tmp.v;</span><br><span class="line"><span class="keyword">if</span>(fx)Q.push((node)&#123;sum[fx],si[fx],fx&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;「AHOI-HNOI2018」排列&quot;&gt;&lt;a href=&quot;#「AHOI-HNOI2018」排列&quot; class=&quot;headerlink&quot; title=&quot;「AHOI / HNOI2018」排列&quot;&gt;&lt;/a&gt;「AHOI / HNOI2018」排列&lt;/h1&gt;&lt;p&gt;&lt;stron
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="贪心" scheme="http://yoursite.com/categories/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="堆" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/"/>
    
      <category term="并查集" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
    
      <category term="贪心" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="堆" scheme="http://yoursite.com/tags/%E5%A0%86/"/>
    
      <category term="并查集" scheme="http://yoursite.com/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>AHOI/HNOI2018 游戏（乱搞/拓扑排序）</title>
    <link href="http://yoursite.com/2018/05/03/AHOI-HNOI2018-%E6%B8%B8%E6%88%8F%EF%BC%88%E4%B9%B1%E6%90%9E-%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%EF%BC%89/"/>
    <id>http://yoursite.com/2018/05/03/AHOI-HNOI2018-游戏（乱搞-拓扑排序）/</id>
    <published>2018-05-03T00:02:31.000Z</published>
    <updated>2018-09-04T13:57:14.978Z</updated>
    
    <content type="html"><![CDATA[<h1 id="「AHOI-HNOI2018」游戏"><a href="#「AHOI-HNOI2018」游戏" class="headerlink" title="「AHOI / HNOI2018」游戏"></a>「AHOI / HNOI2018」游戏</h1><p><strong>问题描述</strong></p><blockquote><p>一次小 G 和小 H 在玩寻宝游戏，有 $n$ 个房间排成一列，编号为 $1,2,…,n$，相邻房间之间都有 $1$ 道门。其中一部分门上有锁（因此需要对应的钥匙才能开门），其余的门都能直接打开。</p><p>现在小 G 告诉了小 H 每把锁的钥匙在哪个房间里（每把锁有且只有一把钥匙），并作出 $p$ 次指示：第 $i$ 次让小 H 从第 $S_i$ 个房间出发，去第 $T_i$ 个房间寻宝。但是小 G 有时会故意在指令里放入死路，而小 H 也不想浪费多余的体力去尝试，于是想事先调查清楚每次的指令是否存在一条通路。</p><p>你是否能为小 H 作出解答呢？</p></blockquote><p><strong>输入格式</strong></p><blockquote><p>第一行三个整数$n$，$m$，$p$，代表共有 $n$ 个房间，$m$ 道门上了锁，以及 $p$ 个询问。</p><p>接下来 $m$ 行每行有两个整数$x$，$y$，代表第 $x$ 到第 $x + 1$ 个房间的门上有把锁，并且这把锁的钥匙被放在了第 $y$ 个房间里。输入保证 $x$ 不重复。</p><p>接下来 $p$ 行，其中第 $i$ 行是两个整数 $S_i$，$T_i$，代表一次询问。</p></blockquote><p><strong>输出格式</strong></p><blockquote><p>输出 $m$ 行，每行一个大写的 <code>YES</code> 或 <code>NO</code> 分别代表能或不能到达。</p></blockquote><p><strong>样例输入</strong> </p><blockquote><p>5 4 5<br>1 3<br>2 2<br>3 1<br>4 4<br>2 5<br>3 5<br>4 5<br>2 1<br>3 1</p></blockquote><p><strong>样例输出</strong> </p><blockquote><p>YES<br>NO<br>YES<br>YES<br>NO</p></blockquote><p><strong>提示</strong></p><blockquote><table><thead><tr><th style="text-align:center">测试点编号</th><th style="text-align:center">n</th><th style="text-align:center">m</th><th style="text-align:center">其他特性</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">$ \le 1000 $</td><td style="text-align:center">$ \le 1000 $</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">$ \le 1000 $</td><td style="text-align:center">$ \le 1000 $</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">$ \le 10^5 $</td><td style="text-align:center">$ \le 10^5 $</td><td style="text-align:center">$y \le x$ 恒成立</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">$ \le 10^5 $</td><td style="text-align:center">$ \le 10^5 $</td><td style="text-align:center">$y \le x$ 恒成立</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">$ \le 10^5 $</td><td style="text-align:center">$ \le 10^5 $</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">$ \le 10^5 $</td><td style="text-align:center">$ \le 10^5 $</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">$ \le 10^6 $</td><td style="text-align:center">$ \le 10^6 $</td><td style="text-align:center">$y \le x$ 恒成立</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">$ \le 10^6 $</td><td style="text-align:center">$ \le 10^6 $</td><td style="text-align:center">$y \le x$ 恒成立</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">$ \le 10^6 $</td><td style="text-align:center">$ \le 10^6 $</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">$ \le 10^6 $</td><td style="text-align:center">$ \le 10^6 $</td><td style="text-align:center">无</td></tr></tbody></table><p>对于所有数据，保证 $1 \le n,p \le 10^6$，$0 \le m &lt; n$，$1 \le x, y, S_i,T_i &lt; n$，保证 $x$ 不重复。</p><p>由于本题输入文件较大，建议在程序中使用读入优化。</p></blockquote><hr><p>显然需要处理出每个点能到的区间。一个显然的优化是到达某个点后将当前区间与该点能到的区间取并。</p><p>本题数据较水，略加优化的暴力即可AC。并且跑得比正解快。</p><p>正解是考虑每一扇门，假如$i$到$i+1$的门的钥匙在$i$的那一边，那么就只能是$i$走到$i+1$，因此从$i$向$i+1$连边，然后处理出拓扑关系，按照拓扑关系来暴力往两边拓展即可保证复杂度。</p><hr><p><strong>暴力代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*p1,*p2;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC (p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,1,1000000,stdin),p1==p2)?0:*p1++)</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _R(<span class="keyword">int</span> &amp;x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> t=GC;</span><br><span class="line"><span class="keyword">while</span>(t&lt;<span class="number">48</span>||t&gt;<span class="number">57</span>)t=GC;</span><br><span class="line"><span class="keyword">for</span>(x=<span class="number">0</span>;t&gt;<span class="number">47</span>&amp;&amp;t&lt;<span class="number">58</span>;t=GC)x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+t<span class="number">-48</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m,q,pos[N],L[N],R[N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">In</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> i)</span></span>&#123;<span class="keyword">return</span> p&gt;=L[i]&amp;&amp;p&lt;=R[i];&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k,x,y;</span><br><span class="line">_R(n);_R(m);_R(q);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)_R(x),_R(y),pos[x]=y;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)L[i]=R[i]=i;</span><br><span class="line"><span class="keyword">for</span>(i=n;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(R[i]&lt;n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!pos[R[i]]||In(pos[R[i]],i))R[i]=R[R[i]+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">bool</span> ok=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(L[i]&gt;<span class="number">1</span>&amp;&amp;(!pos[L[i]<span class="number">-1</span>]||In(pos[L[i]<span class="number">-1</span>],i)))</span><br><span class="line">&#123;</span><br><span class="line">L[i]=L[L[i]<span class="number">-1</span>];</span><br><span class="line">ok=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(R[i]&lt;n&amp;&amp;(!pos[R[i]]||In(pos[R[i]],i)))</span><br><span class="line">&#123;</span><br><span class="line">R[i]=R[R[i]+<span class="number">1</span>];</span><br><span class="line">ok=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!ok)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">&#123;</span><br><span class="line">_R(x);_R(y);</span><br><span class="line"><span class="keyword">if</span>(In(y,x))<span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;「AHOI-HNOI2018」游戏&quot;&gt;&lt;a href=&quot;#「AHOI-HNOI2018」游戏&quot; class=&quot;headerlink&quot; title=&quot;「AHOI / HNOI2018」游戏&quot;&gt;&lt;/a&gt;「AHOI / HNOI2018」游戏&lt;/h1&gt;&lt;p&gt;&lt;stron
      
    
    </summary>
    
      <category term="图论" scheme="http://yoursite.com/categories/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="拓扑排序" scheme="http://yoursite.com/categories/%E5%9B%BE%E8%AE%BA/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    
    
      <category term="拓扑排序" scheme="http://yoursite.com/tags/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>SDOI2015 道路修建（线段树）</title>
    <link href="http://yoursite.com/2018/04/20/SDOI2015-%E9%81%93%E8%B7%AF%E4%BF%AE%E5%BB%BA%EF%BC%88%E7%BA%BF%E6%AE%B5%E6%A0%91%EF%BC%89/"/>
    <id>http://yoursite.com/2018/04/20/SDOI2015-道路修建（线段树）/</id>
    <published>2018-04-20T03:29:48.000Z</published>
    <updated>2018-09-04T13:57:14.998Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SDOI2015-道路修建"><a href="#SDOI2015-道路修建" class="headerlink" title="[SDOI2015]道路修建"></a>[SDOI2015]道路修建</h1><p><strong>问题描述</strong></p><blockquote><p>某国有2N个城市，这2N个城市构成了一个2行N列的方格网。现在该国政府有一个旅游发展计划，这个计划需要选定L、R两列(L&lt;=R)，修建若干条专用道路，使得这两列之间（包括这两列）的所有2(R-L+1)个城市中每个城市可以只通过专用道路就可以到达这2(R-L+1)个城市中的任何一个城市。这种专用道路只能在同一行相邻两列的城市或者同一列的两个城市之间修建，且修建需要花费一定的费用。由于该国政府决定尽量缩减开支，因此政府决定，选定L、R后，只修建2(R-L+1)-1条专用道路，使得这些专用道路构成一个树结构。现在你需要帮助该国政府写一个程序，完成这个任务。具体地，该任务包含M个操作，每个操作的格式如下：</p><p>1.C x0 y0 x1 y1 w：由于重新对第x0行第y0列的城市和第x1行第y1列的城市之间的情况进行了考察，它们之间修建一条专用道路的花费变成了w；</p><p>2.Q L R：若政府选定的两列分别为L、R，询问政府的最小开支。</p></blockquote><p><strong>输入格式</strong></p><blockquote><p>第一行，两个整数N、M。</p><p>第二行，N-1个整数，其中第i个整数表示初始时第1行第i列的城市和第1行第i+1列的城市之间修建一条专用道路的费用。</p><p>第三行，N-1个整数，其中第i个整数表示初始时第2行第i列的城市和第2行第i+1列的城市之间修建一条专用道路的费用。</p><p>第四行，N个整数，其中第i个整数表示初始时第1行第i列的城市和第2行第i列的城市之间修建一条专用道路的费用。</p><p>接下来的M行，每行一个操作。</p></blockquote><p><strong>输出格式</strong></p><blockquote><p>对于每个询问操作，输出一行，表示你计算出的政府的最小开支。</p></blockquote><p><strong>样例输入</strong></p><blockquote><p>3 3</p><p>1 2</p><p>2 1</p><p>3 1 2</p><p>Q 1 3</p><p>C 1 2 2 2 3</p><p>Q 2 3</p></blockquote><p><strong>样例输出</strong></p><blockquote><p>7</p><p>5</p></blockquote><p><strong>提示</strong></p><blockquote><p>对于40%的数据，1&lt;=N, M&lt;=600；</p><p>对于全部的数据，1&lt;=N, M&lt;=60000，任何时刻任何一条专用道路的修建费用不超过$10^4$</p></blockquote><hr><p>观察可知，对于一个联通块，只需要维护它的四个角的联通情况就行了。因此对于一个联通块，最多存在$10$种可能联通情况，我们考虑用线段树维护区间联通信息，即每一种联通情况的最小费用，然后合并的时候讨论一下就行了。</p><p>然后观察转移发现实际上这$10$种情况本质不同的只有$5$种，并且合并时只需要考虑连$1$条边还是$2$条边，因此最多有$50$种转移，实际上没有这么多。然后询问就只需要将线段树上对应区间拿来合并就行了。</p><hr><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 66666</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*p1,*p2;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC (p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,1,1000000,stdin),p1==p2)?0:*p1++)</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">int</span> _R(<span class="keyword">int</span> &amp;x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> t=GC;</span><br><span class="line"><span class="keyword">while</span>(t&lt;<span class="number">48</span>||t&gt;<span class="number">57</span>)t=GC;</span><br><span class="line"><span class="keyword">for</span>(x=<span class="number">0</span>;t&gt;<span class="number">47</span>&amp;&amp;t&lt;<span class="number">58</span>;t=GC)x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+t<span class="number">-48</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,UR[N],DR[N],D[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nodd</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> v[<span class="number">6</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)v[i]=inf;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">node *ls,*rs;</span><br><span class="line">nodd v;</span><br><span class="line">&#125;Seg[N&lt;&lt;<span class="number">2</span>],*rt,*tl,*null;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">rt=tl=null=&amp;Seg[<span class="number">0</span>];</span><br><span class="line">null-&gt;ls=null-&gt;rs=null;</span><br><span class="line">null-&gt;v.Init();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(nodd &amp;p,nodd &amp;l,nodd &amp;r,<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> c=min(a,b),d=a+b;p.Init();</span><br><span class="line">p.v[<span class="number">1</span>]=min(p.v[<span class="number">1</span>],l.v[<span class="number">1</span>]+r.v[<span class="number">1</span>]+c);</span><br><span class="line">p.v[<span class="number">1</span>]=min(p.v[<span class="number">1</span>],l.v[<span class="number">1</span>]+r.v[<span class="number">2</span>]+d);</span><br><span class="line">p.v[<span class="number">3</span>]=min(p.v[<span class="number">3</span>],l.v[<span class="number">1</span>]+r.v[<span class="number">3</span>]+c);</span><br><span class="line">p.v[<span class="number">3</span>]=min(p.v[<span class="number">3</span>],l.v[<span class="number">1</span>]+r.v[<span class="number">4</span>]+c);</span><br><span class="line">p.v[<span class="number">1</span>]=min(p.v[<span class="number">1</span>],l.v[<span class="number">1</span>]+r.v[<span class="number">4</span>]+d);</span><br><span class="line">p.v[<span class="number">3</span>]=min(p.v[<span class="number">3</span>],l.v[<span class="number">1</span>]+r.v[<span class="number">5</span>]+d);</span><br><span class="line"></span><br><span class="line">p.v[<span class="number">2</span>]=min(p.v[<span class="number">2</span>],l.v[<span class="number">2</span>]+r.v[<span class="number">1</span>]+c);</span><br><span class="line">p.v[<span class="number">2</span>]=min(p.v[<span class="number">2</span>],l.v[<span class="number">2</span>]+r.v[<span class="number">2</span>]+d);</span><br><span class="line">p.v[<span class="number">5</span>]=min(p.v[<span class="number">5</span>],l.v[<span class="number">2</span>]+r.v[<span class="number">3</span>]+c);</span><br><span class="line">p.v[<span class="number">5</span>]=min(p.v[<span class="number">5</span>],l.v[<span class="number">2</span>]+r.v[<span class="number">4</span>]+c);</span><br><span class="line">p.v[<span class="number">2</span>]=min(p.v[<span class="number">2</span>],l.v[<span class="number">2</span>]+r.v[<span class="number">4</span>]+d);</span><br><span class="line">p.v[<span class="number">5</span>]=min(p.v[<span class="number">5</span>],l.v[<span class="number">2</span>]+r.v[<span class="number">5</span>]+d);</span><br><span class="line"></span><br><span class="line">p.v[<span class="number">1</span>]=min(p.v[<span class="number">1</span>],l.v[<span class="number">3</span>]+r.v[<span class="number">1</span>]+d);</span><br><span class="line">p.v[<span class="number">3</span>]=min(p.v[<span class="number">3</span>],l.v[<span class="number">3</span>]+r.v[<span class="number">3</span>]+d);</span><br><span class="line">p.v[<span class="number">3</span>]=min(p.v[<span class="number">3</span>],l.v[<span class="number">3</span>]+r.v[<span class="number">4</span>]+d);</span><br><span class="line"></span><br><span class="line">p.v[<span class="number">2</span>]=min(p.v[<span class="number">2</span>],l.v[<span class="number">4</span>]+r.v[<span class="number">1</span>]+c);</span><br><span class="line">p.v[<span class="number">1</span>]=min(p.v[<span class="number">1</span>],l.v[<span class="number">4</span>]+r.v[<span class="number">1</span>]+d);</span><br><span class="line">p.v[<span class="number">2</span>]=min(p.v[<span class="number">2</span>],l.v[<span class="number">4</span>]+r.v[<span class="number">2</span>]+d);</span><br><span class="line">p.v[<span class="number">5</span>]=min(p.v[<span class="number">5</span>],l.v[<span class="number">4</span>]+r.v[<span class="number">3</span>]+c);</span><br><span class="line">p.v[<span class="number">3</span>]=min(p.v[<span class="number">3</span>],l.v[<span class="number">4</span>]+r.v[<span class="number">3</span>]+d);</span><br><span class="line">p.v[<span class="number">5</span>]=min(p.v[<span class="number">5</span>],l.v[<span class="number">4</span>]+r.v[<span class="number">4</span>]+c);</span><br><span class="line">p.v[<span class="number">4</span>]=min(p.v[<span class="number">4</span>],l.v[<span class="number">4</span>]+r.v[<span class="number">4</span>]+d);</span><br><span class="line">p.v[<span class="number">5</span>]=min(p.v[<span class="number">5</span>],l.v[<span class="number">4</span>]+r.v[<span class="number">5</span>]+d);</span><br><span class="line"></span><br><span class="line">p.v[<span class="number">2</span>]=min(p.v[<span class="number">2</span>],l.v[<span class="number">5</span>]+r.v[<span class="number">1</span>]+d);</span><br><span class="line">p.v[<span class="number">5</span>]=min(p.v[<span class="number">5</span>],l.v[<span class="number">5</span>]+r.v[<span class="number">3</span>]+d);</span><br><span class="line">p.v[<span class="number">5</span>]=min(p.v[<span class="number">5</span>],l.v[<span class="number">5</span>]+r.v[<span class="number">4</span>]+d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BT</span><span class="params">(node *&amp;p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">p=++tl;p-&gt;ls=p-&gt;rs=null;</span><br><span class="line"><span class="keyword">if</span>(l==r)</span><br><span class="line">&#123;</span><br><span class="line">p-&gt;v.v[<span class="number">1</span>]=D[l];</span><br><span class="line">p-&gt;v.v[<span class="number">2</span>]=p-&gt;v.v[<span class="number">3</span>]=inf;</span><br><span class="line">p-&gt;v.v[<span class="number">4</span>]=<span class="number">0</span>;</span><br><span class="line">p-&gt;v.v[<span class="number">5</span>]=inf;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">BT(p-&gt;ls,l,mid);</span><br><span class="line">BT(p-&gt;rs,mid+<span class="number">1</span>,r);</span><br><span class="line">Update(p-&gt;v,p-&gt;ls-&gt;v,p-&gt;rs-&gt;v,UR[mid],DR[mid]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MD</span><span class="params">(node *p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)</span><br><span class="line">&#123;</span><br><span class="line">p-&gt;v.v[<span class="number">1</span>]=D[l];</span><br><span class="line">p-&gt;v.v[<span class="number">2</span>]=p-&gt;v.v[<span class="number">3</span>]=inf;</span><br><span class="line">p-&gt;v.v[<span class="number">4</span>]=<span class="number">0</span>;</span><br><span class="line">p-&gt;v.v[<span class="number">5</span>]=inf;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(k&lt;=mid)MD(p-&gt;ls,l,mid,k);</span><br><span class="line"><span class="keyword">else</span> MD(p-&gt;rs,mid+<span class="number">1</span>,r,k);</span><br><span class="line">Update(p-&gt;v,p-&gt;ls-&gt;v,p-&gt;rs-&gt;v,UR[mid],DR[mid]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">nodd <span class="title">Gans</span><span class="params">(node *p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)<span class="keyword">return</span> p-&gt;v;</span><br><span class="line"><span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;nodd a,b,t;</span><br><span class="line">a.Init();b.Init();t.Init();</span><br><span class="line"><span class="keyword">if</span>(x&gt;mid)<span class="keyword">return</span> Gans(p-&gt;rs,mid+<span class="number">1</span>,r,x,y);</span><br><span class="line"><span class="keyword">if</span>(y&lt;=mid)<span class="keyword">return</span> Gans(p-&gt;ls,l,mid,x,y);</span><br><span class="line">a=Gans(p-&gt;ls,l,mid,x,y);</span><br><span class="line">b=Gans(p-&gt;rs,mid+<span class="number">1</span>,r,x,y);</span><br><span class="line">Update(t,a,b,UR[mid],DR[mid]);</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k,x1,y1,x2,y2;</span><br><span class="line">_R(n);_R(m);<span class="keyword">char</span> s;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)_R(UR[i]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)_R(DR[i]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)_R(D[i]);</span><br><span class="line">Init();BT(rt,<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line">s=GC;<span class="keyword">while</span>(s!=<span class="string">'Q'</span>&amp;&amp;s!=<span class="string">'C'</span>)s=GC;</span><br><span class="line"><span class="keyword">if</span>(s==<span class="string">'Q'</span>)</span><br><span class="line">&#123;</span><br><span class="line">_R(x1);_R(x2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Gans(rt,<span class="number">1</span>,n,x1,x2).v[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">_R(x1);_R(y1);_R(x2);_R(y2);_R(k);</span><br><span class="line"><span class="keyword">if</span>(y1&gt;y2)swap(y1,y2);</span><br><span class="line"><span class="keyword">if</span>(x1==x2)x1==<span class="number">1</span>?UR[y1]=k:DR[y1]=k;</span><br><span class="line"><span class="keyword">else</span> D[y1]=k;</span><br><span class="line">MD(rt,<span class="number">1</span>,n,y1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SDOI2015-道路修建&quot;&gt;&lt;a href=&quot;#SDOI2015-道路修建&quot; class=&quot;headerlink&quot; title=&quot;[SDOI2015]道路修建&quot;&gt;&lt;/a&gt;[SDOI2015]道路修建&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/p
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="线段树" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>NKOJ4029 CodeChef COUNTARI（分块+FFT）</title>
    <link href="http://yoursite.com/2018/04/20/NKOJ4029-CodeChef-COUNTARI%EF%BC%88%E5%88%86%E5%9D%97-FFT%EF%BC%89/"/>
    <id>http://yoursite.com/2018/04/20/NKOJ4029-CodeChef-COUNTARI（分块-FFT）/</id>
    <published>2018-04-20T01:44:13.000Z</published>
    <updated>2018-09-04T13:57:14.998Z</updated>
    
    <content type="html"><![CDATA[<h1 id="P4029-CodeChef-COUNTARI"><a href="#P4029-CodeChef-COUNTARI" class="headerlink" title="P4029 [CodeChef] COUNTARI"></a>P4029 [CodeChef] COUNTARI</h1><p><strong>问题描述</strong></p><blockquote><p>给定一个长度为N的数组A[]，求有多少对$i, j, k（1\leq i&lt;j&lt;k\leq N）$满足$A[k]-A[j]=A[j]-A[i]$</p></blockquote><p><strong>输入格式</strong></p><blockquote><p>第一行一个整数$N（N&lt;=10^5）$。</p><p>接下来一行N个数$A[i]（A[i]&lt;=30000）$。</p></blockquote><p><strong>输出格式</strong></p><blockquote><p>一行一个整数。</p></blockquote><p><strong>样例输入</strong></p><blockquote><p>10</p><p>3 5 3 6 3 4 10 4 5 2</p></blockquote><p><strong>样例输出</strong></p><blockquote><p>9</p></blockquote><hr><p>容易想到一个朴素的暴力，枚举$j$的位置，然后两边卷积得到$A[i]+A[k]=2A[j]$的$(i,k)$的数量。考虑优化。</p><p>用分块处理，设块的大小为$K$，那么分三种情况来讨论。</p><p>当$i,j,k$在同一块内时，枚举$(i,k)$，同时维护$cnt[j]$，那么单块可以在$O(K^2)$内出解，总复杂度就是$O(NK)$的</p><p>当$i,j,k$有两个在同一块内时，同样枚举$(i,k)$，复杂度仍然是$O(NK)$</p><p>当$i,j,k$均不在同一块时，枚举每一块，将左右两边的块卷积起来，复杂度就是$\frac{N}{K}M\log M$，$M=max{A[i]}$</p><p>那么只需要一个比较优秀的$K$即可解决。似乎当$K=5.3\sqrt{N}$时效果不错。</p><hr><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">com</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">double</span> r,v;</span><br><span class="line">com(<span class="keyword">double</span> x=<span class="number">0</span>,<span class="keyword">double</span> y=<span class="number">0</span>)&#123;r=x;v=y;&#125;</span><br><span class="line">&#125;B[N],D[N],w[<span class="number">2</span>][N];</span><br><span class="line">com <span class="keyword">operator</span>+(com &amp;a,com &amp;b)&#123;<span class="keyword">return</span> com(a.r+b.r,a.v+b.v);&#125;</span><br><span class="line">com <span class="keyword">operator</span>-(com &amp;a,com &amp;b)&#123;<span class="keyword">return</span> com(a.r-b.r,a.v-b.v);&#125;</span><br><span class="line">com <span class="keyword">operator</span>*(com &amp;a,com &amp;b)&#123;<span class="keyword">return</span> com(a.r*b.r-a.v*b.v,a.r*b.v+a.v*b.r);&#125;</span><br><span class="line"><span class="keyword">int</span> n,K,tot,lp[N],rp[N],A[N],Lcnt[N],Rcnt[N],cnt[N],L,rev[N];</span><br><span class="line">ll ans;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FFT_pre</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line">com f=com(<span class="built_in">cos</span>(<span class="number">2.0</span>*pi/L),<span class="built_in">sin</span>(<span class="number">2.0</span>*pi/L));</span><br><span class="line">com g=com(<span class="built_in">cos</span>(<span class="number">2.0</span>*pi/L),-<span class="built_in">sin</span>(<span class="number">2.0</span>*pi/L));</span><br><span class="line">w[<span class="number">0</span>][<span class="number">0</span>]=w[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;L;i++)</span><br><span class="line">&#123;</span><br><span class="line">w[<span class="number">0</span>][i]=w[<span class="number">0</span>][i<span class="number">-1</span>]*g;</span><br><span class="line">w[<span class="number">1</span>][i]=w[<span class="number">1</span>][i<span class="number">-1</span>]*f;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FFT</span><span class="params">(com C[],<span class="keyword">int</span> ty)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> i,j,k,m,t;com t0,t1;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;L;i++)<span class="keyword">if</span>(i&lt;rev[i])swap(C[i],C[rev[i]]);</span><br><span class="line"><span class="keyword">for</span>(m=<span class="number">1</span>,t;t=L/(m&lt;&lt;<span class="number">1</span>),m&lt;L;m&lt;&lt;=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;L;k+=m&lt;&lt;<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span>(i=k,j=<span class="number">0</span>;i&lt;k+m;i++,j+=t)</span><br><span class="line">&#123;</span><br><span class="line">t0=C[i];t1=C[i+m]*w[ty][j];</span><br><span class="line">C[i]=t0+t1;</span><br><span class="line">C[i+m]=t0-t1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ty==<span class="number">1</span>)<span class="keyword">return</span>;t0=<span class="number">1.0</span>/L;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;L;i++)C[i]=C[i]*t0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k,x,y,Max=<span class="number">0</span>,len=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);K=<span class="number">5.3</span>*<span class="built_in">sqrt</span>(n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;A[i]);</span><br><span class="line">Max=max(Max,A[i]);</span><br><span class="line">Rcnt[A[i]]++;</span><br><span class="line">rp[i/K]=i;</span><br><span class="line"><span class="keyword">if</span>(!lp[i/K])lp[i/K]=i;</span><br><span class="line">&#125;</span><br><span class="line">tot=n/K;L=<span class="number">1</span>;<span class="keyword">while</span>(L&lt;=(Max&lt;&lt;<span class="number">1</span>))L&lt;&lt;=<span class="number">1</span>,len++;FFT_pre();</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;L;i++)rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;len&gt;&gt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=tot;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=lp[i];j&lt;=rp[i];j++)Rcnt[A[j]]--;</span><br><span class="line"><span class="keyword">for</span>(j=lp[i];j&lt;rp[i];j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(k=j+<span class="number">1</span>;k&lt;=rp[i];k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(A[j]+A[k]+<span class="number">1</span>&amp;<span class="number">1</span>)ans+=cnt[A[j]+A[k]&gt;&gt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>((A[j]&lt;&lt;<span class="number">1</span>)-A[k]&gt;=<span class="number">0</span>)ans+=Lcnt[(A[j]&lt;&lt;<span class="number">1</span>)-A[k]];</span><br><span class="line"><span class="keyword">if</span>((A[k]&lt;&lt;<span class="number">1</span>)-A[j]&gt;=<span class="number">0</span>)ans+=Rcnt[(A[k]&lt;&lt;<span class="number">1</span>)-A[j]];</span><br><span class="line">cnt[A[k]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(k=j+<span class="number">1</span>;k&lt;=rp[i];k++)cnt[A[k]]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i!=<span class="number">0</span>&amp;&amp;i!=tot)</span><br><span class="line">&#123;</span><br><span class="line">fill(B,B+L,<span class="number">0</span>);fill(D,D+L,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;L;j++)B[j]=Lcnt[j],D[j]=Rcnt[j];</span><br><span class="line">FFT(B,<span class="number">1</span>);FFT(D,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;L;j++)B[j]=B[j]*D[j];</span><br><span class="line">FFT(B,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(j=lp[i];j&lt;=rp[i];j++)ans+=<span class="built_in">floor</span>(B[A[j]&lt;&lt;<span class="number">1</span>].r+<span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(j=lp[i];j&lt;=rp[i];j++)Lcnt[A[j]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>,ans);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;P4029-CodeChef-COUNTARI&quot;&gt;&lt;a href=&quot;#P4029-CodeChef-COUNTARI&quot; class=&quot;headerlink&quot; title=&quot;P4029 [CodeChef] COUNTARI&quot;&gt;&lt;/a&gt;P4029 [CodeChef
      
    
    </summary>
    
      <category term="数学" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="分治法" scheme="http://yoursite.com/categories/%E5%88%86%E6%B2%BB%E6%B3%95/"/>
    
      <category term="分块" scheme="http://yoursite.com/categories/%E5%88%86%E6%B2%BB%E6%B3%95/%E5%88%86%E5%9D%97/"/>
    
      <category term="FFT" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/FFT/"/>
    
    
      <category term="分块" scheme="http://yoursite.com/tags/%E5%88%86%E5%9D%97/"/>
    
      <category term="FFT" scheme="http://yoursite.com/tags/FFT/"/>
    
  </entry>
  
  <entry>
    <title>NOI2016 区间（线段树）</title>
    <link href="http://yoursite.com/2018/04/19/NOI2016-%E5%8C%BA%E9%97%B4%EF%BC%88%E7%BA%BF%E6%AE%B5%E6%A0%91%EF%BC%89/"/>
    <id>http://yoursite.com/2018/04/19/NOI2016-区间（线段树）/</id>
    <published>2018-04-19T13:42:20.000Z</published>
    <updated>2018-09-04T13:57:14.998Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【NOI2016】区间"><a href="#【NOI2016】区间" class="headerlink" title="【NOI2016】区间"></a>【NOI2016】区间</h1><p><strong>问题描述</strong></p><blockquote><p>在数轴上有 $n$ 个闭区间 $[l_1,r_1],[l_2,r_2],…,[l_n,r_n]$。现在要从中选出 $m$ 个区间，使得这 $m$ 个区间共同包含至少一个位置。换句话说，就是使得存在一个  $x$，使得对于每一个被选中的区间 $[l_i,r_i]$，都有 $l_i\leq x\leq r_i$。</p><p>对于一个合法的选取方案，它的花费为被选中的最长区间长度减去被选中的最短区间长度。区间 $[l_i,r_i]$ 的长度定义为 $r_i−l_i$，即等于它的右端点的值减去左端点的值。</p><p>求所有合法方案中最小的花费。如果不存在合法的方案，输出 $−1$。</p></blockquote><p><strong>输入格式</strong></p><blockquote><p>第一行包含两个正整数 $n,m$ 用空格隔开，意义如上文所述。保证 $1\leq m\leq n$。</p><p>接下来 $n$ 行，每行表示一个区间，包含用空格隔开的两个整数 $l_i$ 和 $r_i$ 为该区间的左右端点。</p></blockquote><p><strong>输出格式</strong></p><blockquote><p>只有一行，包含一个正整数，即最小花费。</p></blockquote><p><strong>样例输入</strong></p><blockquote><p>6 3<br>3 5<br>1 2<br>3 4<br>2 2<br>1 5<br>1 4</p></blockquote><p><strong>样例输出</strong></p><blockquote><p>2</p></blockquote><p><strong>提示</strong></p><blockquote><p>所有测试数据的范围和特点如下表所示：</p><table class="ui center aligned table"><thead><tr><th>测试点编号</th><br><th> $ n $ </th><br><th> $ m $ </th><br><th> $ l_i,r_i $ </th><br></tr></thead><tbody><tr><td>1</td><td rowspan="2"> $ 20 $ </td><td> $ 9 $ </td><td rowspan="2"> $ 0 \le l_i \le r_i \le 100 $ </td></tr><tr><td>2</td><td> $ 10 $ </td><br></tr><tr><td>3</td><td> $ 199 $ </td><td rowspan="2"> $ 3 $ </td><td rowspan="4"> $ 0 \le l_i \le r_i \le 100000 $ </td></tr><tr><td>4</td><td> $ 200 $ </td></tr><tr><td>5</td><td> $ 1000 $ </td><td rowspan="2"> $ 2 $ </td></tr><tr><td>6</td><td> $ 2000 $ </td></tr><tr><td>7</td><td> $ 199 $ </td><td> $ 60 $ </td><td rowspan="2"> $ 0 \le l_i \le r_i \le 5000 $ </td></tr><tr><td>8</td><td rowspan="2"> $ 200 $ </td><td rowspan="2"> $ 50 $ </td></tr><tr><td>9</td><td> $ 0 \le l_i \le r_i \le 10^9 $ </td></tr><tr><td>10</td><td> $ 1999 $ </td><td> $ 500 $ </td><td rowspan="2"> $ 0 \le l_i \le r_i \le 5000 $ </td></tr><tr><td>11</td><td rowspan="2"> $ 2000 $ </td><td> $ 400 $ </td></tr><tr><td>12</td><td> $ 500 $ </td><td> $ 0 \le l_i \le r_i \le 10^9 $ </td></tr><tr><td>13</td><td> $ 30000 $ </td><td> $ 2000 $ </td><td rowspan="4"> $ 0 \le l_i \le r_i \le 100000 $ </td></tr><tr><td>14</td><td> $ 40000 $ </td><td> $ 1000 $ </td></tr><tr><td>15</td><td> $ 50000 $ </td><td> $ 15000 $ </td></tr><tr><td>16</td><td> $ 100000 $ </td><td rowspan="2"> $ 20000 $ </td></tr><tr><td>17</td><td> $ 200000 $ </td><td rowspan="4"> $ 0 \le l_i \le r_i \le 10^9 $ </td></tr><tr><td>18</td><td> $ 300000 $ </td><td> $ 50000 $ </td></tr><tr><td>19</td><td> $ 400000 $ </td><td> $ 90000 $ </td></tr><tr><td>20</td><td> $ 500000 $ </td><td> $ 200000 $ </td></tr></tbody></table></blockquote><hr><p>首先将区间按照长度排序，那么不难发现最后答案一定可以由连续的一段区间给出。然后判断一段区间$[l,r]$是否合法就是判断将这些区间拿去做区间覆盖之后有一个位置的覆盖次数大于等于$m$，容易发现对于每一个$r$作为右端点的时候，最优的$l$的取值一定是单调不降的。</p><p>因此我们可以从左往右枚举$r$，然后维护最优的$l$的位置，当$[l,r]$满足条件时就更新答案。只需要用一颗线段树来维护区间覆盖就行了。</p><hr><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(a,b) (a&gt;b?a:b)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(a,b) (a&lt;b?a:b)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*p1,*p2;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC (p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,1,1000000,stdin),p1==p2)?0:*p1++)</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _R(<span class="keyword">int</span> &amp;x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> t=GC;</span><br><span class="line"><span class="keyword">while</span>(t&lt;<span class="number">48</span>||t&gt;<span class="number">57</span>)t=GC;</span><br><span class="line"><span class="keyword">for</span>(x=<span class="number">0</span>;t&gt;<span class="number">47</span>&amp;&amp;t&lt;<span class="number">58</span>;t=GC)x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+t<span class="number">-48</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nodd</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> nodd &amp;b)<span class="keyword">const</span></span><br><span class="line">&#123;<span class="keyword">return</span> r-l&lt;b.r-b.l;&#125;</span><br><span class="line">&#125;K[N];</span><br><span class="line"><span class="keyword">int</span> n,m,ans=<span class="number">1e9</span>,T,Hash[N];</span><br><span class="line"><span class="keyword">int</span> Max[N&lt;&lt;<span class="number">2</span>],lazy[N&lt;&lt;<span class="number">2</span>],ux,uy,ud;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ADD</span><span class="params">(<span class="keyword">register</span> <span class="keyword">int</span> p,<span class="keyword">register</span> <span class="keyword">int</span> l,<span class="keyword">register</span> <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ux&lt;=l&amp;&amp;uy&gt;=r)&#123;Max[p]+=ud;lazy[p]+=ud;<span class="keyword">return</span>;&#125;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(ux&lt;=mid)ADD(p&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line"><span class="keyword">if</span>(uy&gt;mid)ADD(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">Max[p]=max(Max[p&lt;&lt;<span class="number">1</span>],Max[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">Max[p]+=lazy[p];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k,x,y;</span><br><span class="line">_R(n);_R(m);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">_R(x);_R(y);</span><br><span class="line">Hash[++T]=x;Hash[++T]=y;</span><br><span class="line">K[i]=(nodd)&#123;x,y&#125;;</span><br><span class="line">&#125;</span><br><span class="line">sort(K+<span class="number">1</span>,K+n+<span class="number">1</span>);</span><br><span class="line">sort(Hash+<span class="number">1</span>,Hash+T+<span class="number">1</span>);</span><br><span class="line">T=unique(Hash+<span class="number">1</span>,Hash+T+<span class="number">1</span>)-Hash<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">K[i].l=lower_bound(Hash+<span class="number">1</span>,Hash+T+<span class="number">1</span>,K[i].l)-Hash;</span><br><span class="line">K[i].r=lower_bound(Hash+<span class="number">1</span>,Hash+T+<span class="number">1</span>,K[i].r)-Hash;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=j=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">ux=K[i].l;uy=K[i].r;ud=<span class="number">1</span>;</span><br><span class="line">ADD(<span class="number">1</span>,<span class="number">1</span>,T);</span><br><span class="line"><span class="keyword">while</span>(Max[<span class="number">1</span>]&gt;=m)</span><br><span class="line">&#123;</span><br><span class="line">ans=min(ans,Hash[K[i].r]-Hash[K[i].l]-Hash[K[j].r]+Hash[K[j].l]);</span><br><span class="line">ux=K[j].l;uy=K[j].r;ud=<span class="number">-1</span>;</span><br><span class="line">ADD(<span class="number">1</span>,<span class="number">1</span>,T);j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,ans==<span class="number">1e9</span>?<span class="number">-1</span>:ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;【NOI2016】区间&quot;&gt;&lt;a href=&quot;#【NOI2016】区间&quot; class=&quot;headerlink&quot; title=&quot;【NOI2016】区间&quot;&gt;&lt;/a&gt;【NOI2016】区间&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/p&gt;
&lt;blockqu
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="线段树" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>NOI2016 循环之美（莫比乌斯反演+杜教筛）</title>
    <link href="http://yoursite.com/2018/04/19/NOI2016-%E5%BE%AA%E7%8E%AF%E4%B9%8B%E7%BE%8E%EF%BC%88%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94-%E6%9D%9C%E6%95%99%E7%AD%9B%EF%BC%89/"/>
    <id>http://yoursite.com/2018/04/19/NOI2016-循环之美（莫比乌斯反演-杜教筛）/</id>
    <published>2018-04-19T10:59:21.000Z</published>
    <updated>2018-09-04T13:57:14.998Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【NOI2016】循环之美"><a href="#【NOI2016】循环之美" class="headerlink" title="【NOI2016】循环之美"></a>【NOI2016】循环之美</h1><p><strong>问题描述</strong></p><blockquote><p>牛牛是一个热爱算法设计的高中生。在他设计的算法中，常常会使用带小数的数进行计算。牛牛认为，如果在 $k$ 进制下，一个数的小数部分是<strong>纯循环</strong>的，那么它就是美的。</p><p>现在，牛牛想知道：对于已知的十进制数 $n$ 和 $m$，在 $k$ 进制下，有多少个数值上<strong>互不相等</strong>的纯循环小数，可以用分数 $\frac x y$ 表示，其中 $1\le x\le n,1\le y\le m$，且 $x,y$ 是整数。</p><p>一个数是纯循环的，当且仅当其可以写成以下形式：<br>$$a.\dot{c_1} c_2 c_3 \ldots c_{p - 1} \dot{c_p}$$<br>其中，$a$ 是一个整数，$p\ge1$；对于 $1\le i\le p$，$c_i$ 是 $k$ 进制下的一位数字。</p><p>例如，在十进制下，$0.45454545\dots=0.\dot{4}\dot{5}$ 是纯循环的，它可以用 $\frac 5 {11}$、$\frac{10}{22}$ 等分数表示；在十进制下，$0.1666666\dots=0.1\dot{6}$ 则不是纯循环的，它可以用 $\frac 1 6$ 等分数表示。</p><p>需要特别注意的是，我们认为一个整数是纯循环的，因为它的小数部分可以表示成 $0$ 的循环或是 $k-1$ 的循环；而一个小数部分非 $0$ 的有限小数不是纯循环的。</p></blockquote><p><strong>输入格式</strong></p><blockquote><p>输入文件只有一行，包含三个十进制数 $n,m,k$，意义如题所述。</p></blockquote><p><strong>输出格式</strong></p><blockquote><p>只输出一行一个整数，表示满足条件的美的数的个数。</p></blockquote><p><strong>样例输入 1</strong></p><blockquote><p>2 6 10</p></blockquote><p><strong>样例输出 1</strong></p><blockquote><p>4</p></blockquote><p><strong>样例输入 2</strong></p><blockquote><p>23333 666666 310</p></blockquote><p><strong>样例输出 2</strong></p><blockquote><p>5089564081</p></blockquote><p><strong>提示</strong></p><blockquote><p>对于所有的测试点，保证 $1\le n\le 10^9$，$1\le m\le 10^9$，$2\le k\le2000$。</p></blockquote><hr><p>首先考虑什么样的分数$\frac{x}{y}$满足他在$k$进制下是纯循环的，结论是满足$gcd(\frac{y}{gcd(x,y)},k)=1$的分数都是纯循环的。</p><p>证明的话，我们只考虑$gcd(x,y)=1$的情况，不为1的情况类似。那么$\frac{x}{y}$的小数部分只和$x\mod y$有关，那么如果他是纯循环的，假设循环节长度为$a$，一定有$x\equiv k^ax\mod y$，那么由于$(x,y)=1$，得到$k^a\equiv1\mod y$</p><p>上述方程有解当且仅当$gcd(k,y)=1$，这个可以用反证法轻易得证。</p><p>因此我们要求就是$\sum_{i=1}^{m}[gcd(i,k)=1]\sum_{j=1}^{n}[gcd(i,j)=1]$，注意到$[gcd(i,j)=1]=\sum_{d|gcd(i,j)}\mu(d)$，于是</p><p>$$<br>\begin{align}<br>Ans&amp;=\sum_{i=1}^{m}[gcd(i,k)=1]\sum_{j=1}^{n}\sum_{d|gcd(i,j)}\mu(d)=\sum_{d=1}^{min(n,m)}\mu(d)\sum_{i=1}^{m}[gcd(i,k)=1]\sum_{j=1}^{n}[d|gcd(i,j)]\\<br>&amp;=\sum_{d=1}^{min(n,m)}\mu(d)\sum_{i=1}^{\lfloor\frac{m}{d}\rfloor}[gcd(id,k)=1]\lfloor\frac{n}{d}\rfloor=\sum_{d=1}^{min(n,m)}\mu(d)[gcd(d,k)=1]\lfloor\frac{n}{d}\rfloor\sum_{i=1}^{\lfloor\frac{m}{d}\rfloor}[gcd(i,k)=1]<br>\end{align}<br>$$</p><p>我们显然想要分块处理后面的部分，因此考虑怎么求$\sum_{i=1}^{\lfloor\frac{m}{d}\rfloor}[gcd(i,k)=1]$，令$g(n)=\sum_{i=1}^{n}[gcd(i,k)=1]$</p><p>$$<br>g(n)=\sum_{i=1}^{n}[gcd(i,k)=1]=\sum_{i=1}^{n}\sum_{d|gcd(i,k)}\mu(d)=\sum_{d|k}\lfloor\frac{n}{d}\rfloor\mu(d)<br>$$</p><p>因此我们可以在$O(\sqrt{k})$的复杂度内求出$g(n)$，现在考虑如何求$f(n,k)=\sum_{i=1}^{n}\mu(i)[gcd(i,k)=1]$，那么</p><p>$$<br>\begin{align}<br>f(n,k)&amp;=\sum_{i=1}^{n}\mu(i)\sum_{d|gcd(i,k)}\mu(d)=\sum_{d|k}\mu(d)\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\mu(id)<br>\\&amp;=\sum_{d|k}\mu^2(d)\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\mu(i)[gcd(i,d)=1]=\sum_{d|k}\mu^2(d)f(\lfloor\frac{n}{d}\rfloor,d)<br>\end{align}<br>$$</p><p>那么递归处理就行了，求一次的复杂度大概是$O(\sigma_0^2(k)\sqrt{k})+n^{\frac{2}{3}}$，边界情况是当$k=1$的时候，直接用杜教筛求$\mu(i)$的前缀和就行了</p><p>还有另外一种更快的处理方法。令$k=p^tq$，$p$为质数<br>$$<br>\begin{align}<br>f(n,p^tq)&amp;=\sum_{i=1}^{n}\mu(i)[gcd(i,p^tq)=1]=\sum_{i=1}^{n}\mu(i)[gcd(i,q)=1]-\sum_{i=1}^{\lfloor\frac{n}{p}\rfloor}\mu(ip)[gcd(i,pq=1)]\\<br>&amp;=\sum_{i=1}^{n}\mu(i)[gcd(i,q)=1]+\sum_{i=1}^{\lfloor\frac{n}{p}\rfloor}\mu(i)[gcd(i,pq)=1]=f(n,q)+f(\lfloor\frac{n}{p}\rfloor,pq)<br>\end{align}<br>$$<br>然后同样递归处理就行了，复杂度由因数个数变成了质因数个数。同样边界的时候用杜教筛求就好了。当$n=0$时直接返回。</p><p>记得一定要记忆化$f(n,k)$</p><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">ll n,m,k,mu[N],P[N],tot;</span><br><span class="line"><span class="keyword">bool</span> mark[N];</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;ll,ll&gt;Q,S[<span class="number">2005</span>];</span><br><span class="line"><span class="function">ll <span class="title">Gmu</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;N)<span class="keyword">return</span> mu[x];</span><br><span class="line"><span class="keyword">if</span>(Q.count(x))<span class="keyword">return</span> Q[x];</span><br><span class="line">ll ans=<span class="number">1</span>,i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=x;i=j+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">j=x/(x/i);</span><br><span class="line">ans-=(j-i+<span class="number">1</span>)*Gmu(x/i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Q[x]=ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">Gsum</span><span class="params">(ll x,ll p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll i,j;</span><br><span class="line"><span class="keyword">if</span>(p==<span class="number">1</span>)<span class="keyword">return</span> Gmu(x);</span><br><span class="line"><span class="keyword">if</span>(x&lt;=<span class="number">1</span>)<span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">if</span>(S[p].count(x))<span class="keyword">return</span> S[p][x];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;P[i]&lt;=p;i++)<span class="keyword">if</span>(p%P[i]==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">i=P[i];j=p;<span class="keyword">while</span>(j%i==<span class="number">0</span>)j/=i;</span><br><span class="line"><span class="keyword">return</span> S[p][x]=Gsum(x,j)+Gsum(x/i,i*j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">Get</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll i,j,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i*i&lt;=k;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(k%i)<span class="keyword">continue</span>;j=k/i;</span><br><span class="line">ans+=(x/i)*(mu[i]-mu[i<span class="number">-1</span>]);</span><br><span class="line"><span class="keyword">if</span>(j!=i)ans+=(x/j)*(mu[j]-mu[j<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Liner</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll i,j;mu[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;N;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!mark[i])P[++tot]=i,mu[i]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=tot&amp;&amp;i*P[j]&lt;N;j++)</span><br><span class="line">&#123;</span><br><span class="line">mark[i*P[j]]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(i%P[j])mu[i*P[j]]=-mu[i];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">mu[i]+=mu[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll i,j,x,y,z,ans=<span class="number">0</span>;Liner();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;m,&amp;n,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n&amp;&amp;i&lt;=m;i=j+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">j=min(n/(n/i),m/(m/i));</span><br><span class="line">ans+=(Gsum(j,k)-Gsum(i<span class="number">-1</span>,k))*(m/i)*Get(n/i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;【NOI2016】循环之美&quot;&gt;&lt;a href=&quot;#【NOI2016】循环之美&quot; class=&quot;headerlink&quot; title=&quot;【NOI2016】循环之美&quot;&gt;&lt;/a&gt;【NOI2016】循环之美&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="数学" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="莫比乌斯反演" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
    
      <category term="杜教筛" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/%E6%9D%9C%E6%95%99%E7%AD%9B/"/>
    
    
      <category term="莫比乌斯反演" scheme="http://yoursite.com/tags/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
    
      <category term="杜教筛" scheme="http://yoursite.com/tags/%E6%9D%9C%E6%95%99%E7%AD%9B/"/>
    
  </entry>
  
  <entry>
    <title>NOI2016 网格（Tarjan求割点）</title>
    <link href="http://yoursite.com/2018/04/19/NOI2016-%E7%BD%91%E6%A0%BC%EF%BC%88Tarjan%E6%B1%82%E5%89%B2%E7%82%B9%EF%BC%89/"/>
    <id>http://yoursite.com/2018/04/19/NOI2016-网格（Tarjan求割点）/</id>
    <published>2018-04-19T10:57:59.000Z</published>
    <updated>2018-09-14T06:21:34.907Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【NOI2016】网格"><a href="#【NOI2016】网格" class="headerlink" title="【NOI2016】网格"></a>【NOI2016】网格</h1><p><strong>问题描述</strong></p><blockquote><p>跳蚤国王和蛐蛐国王在玩一个游戏。</p><p>他们在一个 $n$ 行 $m$ 列的网格上排兵布阵。其中的 $c$ 个格子中 $(0 \leq c \leq nm)$，每个格子有一只蛐蛐，其余的格子中，每个格子有一只跳蚤。</p><p>我们称占据的格子有公共边的两只跳蚤是相邻的。</p><p>我们称两只跳蚤是连通的，当且仅当这两只跳蚤相邻，或存在另一只跳蚤与这两只跳蚤都连通。</p><p>现在，蛐蛐国王希望，将某些（零个，一个或多个）跳蚤替换成蛐蛐，使得在此之后存在至少两只跳蚤不连通。</p><p>例如：我们用图<img src="/images/0419-NOI2016-2-1.png" alt="">表示一只跳蚤，用图<img src="/images/0419-NOI2016-2-2.png" alt="">表示一只蛐蛐，那么左图描述了一个 $n=4, \ m=4, \ c=2$的情况。</p><p><img src="/images/0419-NOI2016-2-3.png" alt=""></p><p><img src="/images/0419-NOI2016-2-4.png" alt=""></p><p>这种情况下蛐蛐国王可以通过将第二行第二列，和第三行第三列的两只跳蚤替换为蛐蛐，从而达成他的希望，如右图所示。并且，不存在更优的方案，但是可能存在其他替换两只跳蚤的方案。</p><p>你需要首先判断蛐蛐国王的希望能否被达成。如果能够达成，你还需要最小化被替换的跳蚤的个数。</p></blockquote><p><strong>输入格式</strong></p><blockquote><p>每个输入文件包含多组数据。<br>输入文件的第一行只有一个整数 $T$，表示数据的组数。<br>接下来依次输入 $T$ 组数据，每组数据的第一行包含三个整数 $n, m, c$。<br>接下来 $c$ 行，每行包含两个整数 $x, y$ 表示第 $x$ 行，第 $y$ 列的格子被一个蛐蛐占据。每一组数据当中，同一个蛐蛐不会被多次描述。<br>同一行相邻的整数之间由一个空格隔开。</p></blockquote><p><strong>输出格式</strong></p><blockquote><p>对于每一组数据依次输出一行答案。</p><p>如果这组数据中，蛐蛐国王的希望不能被达成，输出<code>-1</code>。否则，输出被替换的跳蚤的个数的最小值。</p></blockquote><p><strong>样例输入</strong></p><blockquote><p>4<br>4 4 2<br>1 1<br>4 4<br>2 3 1<br>1 2<br>2 2 2<br>1 1<br>2 2<br>1 1 0</p></blockquote><p><strong>样例输出</strong></p><blockquote><p>2<br>1<br>0<br>-1</p></blockquote><p><strong>提示</strong></p><blockquote><p>对于所有的数据，$1 \leq n,m \leq 10^9, \ 0 \leq c \leq \text{min}(nm,10^5),\ 1 \leq x \leq n,\ 1 \leq y \leq m,\ 1 \leq T \leq 20$。</p><p>我们记 $\sum c$ 为某个测试点中，其 $T$ 组输入数据的所有 $c$ 的总和，则保证 $\sum c≤10^5$。</p></blockquote><hr><p>这题乍一看感觉很麻烦，但思索一下就能发现答案显然只可能是$-1,0,1,2$之一。考虑依次判断。</p><p>容易发现答案为$-1$当且仅当图中跳蚤数量小于二，或跳蚤数量等于二且相邻。</p><p>否则答案为$0$当且仅当原图中存在至少两只不连通的跳蚤。</p><p>否则答案为$1$当且仅当图中存在割点，否则答案为$2$</p><p>然后发现棋盘很大，不可能把完整的图建出来，考虑只把关键点拿出来讨论。</p><p>容易发现可能成为割点的点只可能是障碍格子八连通的点，考虑只将这些点拿出来，但容易发现当有一个障碍在棋盘边缘时，这样做会出问题，那么考虑再往外拓展一圈，即拿出24个点来。</p><p>然后只需要跑个Tarjan求割点就行了。注意到判断答案是否为$0$只需要将八连通的障碍合并后讨论它相邻的格子就行了。</p><p>最后需要注意，上面的建图还是有反例，就是当两个障碍刚好在对角，且中间有三个格子时。</p><p>这个只需要最后判断割点八连通格子中是否有障碍就行了。</p><hr><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 3000233</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*p1,*p2;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC (p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,1,1000000,stdin),p1==p2)?0:*p1++)</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">int</span> _R(<span class="keyword">int</span> &amp;x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> t=GC;</span><br><span class="line"><span class="keyword">while</span>(t&lt;<span class="number">48</span>||t&gt;<span class="number">57</span>)t=GC;</span><br><span class="line"><span class="keyword">for</span>(x=<span class="number">0</span>;t&gt;<span class="number">47</span>&amp;&amp;t&lt;<span class="number">58</span>;t=GC)x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+t<span class="number">-48</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; par;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mul=<span class="number">1e9</span>+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx4[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,dy4[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx8[<span class="number">8</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;,dy8[<span class="number">8</span>]=&#123;<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> T,n,m,c,bel[N],Bel;<span class="keyword">bool</span> ex_cp,cut[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;par&gt;P,Q;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;around[N],G[N];</span><br><span class="line"><span class="keyword">int</span> cnt,dfn[N],low[N],be[N],scc,VT;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">valid</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="keyword">return</span> x&lt;=n&amp;&amp;y&lt;=m&amp;&amp;x&gt;<span class="number">0</span>&amp;&amp;y&gt;<span class="number">0</span>;&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Hash_table</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> MOD=<span class="number">666666</span>;</span><br><span class="line"><span class="keyword">int</span> tot,las[MOD],nex[N],val[N],stx[N],sty[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tot=<span class="number">0</span>;<span class="built_in">memset</span>(las,<span class="number">0</span>,<span class="keyword">sizeof</span>(las));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> p=(<span class="number">1l</span>l*x*mul+y)%MOD,i;</span><br><span class="line">val[++tot]=k;</span><br><span class="line">stx[tot]=x;sty[tot]=y;</span><br><span class="line">nex[tot]=las[p];</span><br><span class="line">las[p]=tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> p=(<span class="number">1l</span>l*x*mul+y)%MOD,i;</span><br><span class="line"><span class="keyword">for</span>(i=las[p];i;i=nex[i])<span class="keyword">if</span>(stx[i]==x&amp;&amp;sty[i]==y)<span class="keyword">return</span> val[i];</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;A,B;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,y,son=<span class="number">0</span>;</span><br><span class="line">dfn[x]=low[x]=++VT;be[x]=scc;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;G[x].size();i++)</span><br><span class="line">&#123;</span><br><span class="line">y=G[x][i];<span class="keyword">if</span>(y==fa)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(!dfn[y])</span><br><span class="line">&#123;</span><br><span class="line">Tarjan(y,x);son++;</span><br><span class="line">low[x]=min(low[x],low[y]);</span><br><span class="line"><span class="keyword">if</span>(dfn[x]&lt;=low[y])cut[x]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> low[x]=min(dfn[y],low[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(fa==<span class="number">0</span>&amp;&amp;son==<span class="number">1</span>)cut[x]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find_bel</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> lab)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">bel[lab]=Bel;</span><br><span class="line"><span class="keyword">int</span> i,tx,ty,p;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">tx=dx8[i]+x;ty=dy8[i]+y;</span><br><span class="line">p=A.find(tx,ty);</span><br><span class="line"><span class="keyword">if</span>(p!=<span class="number">-1</span>&amp;&amp;bel[p]==<span class="number">0</span>)find_bel(tx,ty,p);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Connect</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,k,x,y,tx,ty,dx,dy,p,q;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;c;i++)A.ins(P[i].first,P[i].second,i);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;c;i++)</span><br><span class="line"><span class="keyword">if</span>(bel[i]==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">Bel++;</span><br><span class="line">find_bel(P[i].first,P[i].second,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=Bel;i++)around[i].clear();</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;c;i++)</span><br><span class="line">&#123;</span><br><span class="line">x=P[i].first;y=P[i].second;</span><br><span class="line"><span class="keyword">for</span>(dx=<span class="number">-2</span>;dx&lt;=<span class="number">2</span>;dx++)</span><br><span class="line"><span class="keyword">for</span>(dy=<span class="number">-2</span>;dy&lt;=<span class="number">2</span>;dy++)</span><br><span class="line"><span class="keyword">if</span>(dx||dy)</span><br><span class="line">&#123;</span><br><span class="line">tx=dx+x;ty=dy+y;</span><br><span class="line"><span class="keyword">if</span>(!valid(tx,ty))<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(A.find(tx,ty)!=<span class="number">-1</span>||B.find(tx,ty)!=<span class="number">-1</span>)<span class="keyword">continue</span>;</span><br><span class="line">cnt++;</span><br><span class="line">Q.push_back(par(tx,ty));</span><br><span class="line">around[bel[i]].push_back(cnt);</span><br><span class="line">B.ins(tx,ty,cnt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=cnt;i++)G[i].clear();</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line">x=Q[i].first;y=Q[i].second;p=i+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;<span class="number">4</span>;k++)</span><br><span class="line">&#123;</span><br><span class="line">tx=x+dx4[k];</span><br><span class="line">ty=y+dy4[k];</span><br><span class="line">q=B.find(tx,ty);</span><br><span class="line"><span class="keyword">if</span>(q!=<span class="number">-1</span>)G[p].push_back(q);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fill(dfn,dfn+cnt+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">fill(low,low+cnt+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">fill(be,be+cnt+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">fill(cut,cut+cnt+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=cnt;i++)<span class="keyword">if</span>(be[i]==<span class="number">0</span>)scc++,Tarjan(i,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line"><span class="keyword">if</span>(cut[i+<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">x=Q[i].first;y=Q[i].second;</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;<span class="number">8</span>;k++)</span><br><span class="line">&#123;</span><br><span class="line">tx=x+dx8[k];</span><br><span class="line">ty=y+dy8[k];</span><br><span class="line"><span class="keyword">if</span>(A.find(tx,ty)!=<span class="number">-1</span>)ex_cp=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=Bel;i++)</span><br><span class="line">&#123;</span><br><span class="line">p=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;around[i].size();k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(p==<span class="number">-1</span>)p=be[around[i][k]];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(be[around[i][k]]!=p)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">P.clear();Q.clear();</span><br><span class="line">A.clear();B.clear();</span><br><span class="line">fill(bel,bel+c+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">Bel=cnt=scc=VT=ex_cp=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tmain</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;_R(T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> i,x,y;</span><br><span class="line">_R(n);_R(m);_R(c);</span><br><span class="line">Clear();</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=c;i++)</span><br><span class="line">&#123;</span><br><span class="line">_R(x);_R(y);</span><br><span class="line">P.push_back(par(x,y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((ll)n*m-c&lt;<span class="number">2l</span>l)&#123;<span class="built_in">puts</span>(<span class="string">"-1"</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(!Connect())&#123;<span class="built_in">puts</span>(<span class="string">"0"</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>((ll)n*m-c==<span class="number">2l</span>l)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(scc==<span class="number">1</span>||!c)<span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"0"</span>);<span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ex_cp||n==<span class="number">1</span>||m==<span class="number">1</span>)<span class="built_in">puts</span>(<span class="string">"1"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"2"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> main_stack=<span class="number">16</span>; </span><br><span class="line"><span class="keyword">char</span> my_stack[<span class="number">128</span>&lt;&lt;<span class="number">20</span>]; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </span><br><span class="line">  __asm__(<span class="string">"movl %%esp, (%%eax);\n"</span>::<span class="string">"a"</span>(my_stack):<span class="string">"memory"</span>); </span><br><span class="line">  __asm__(<span class="string">"movl %%eax, %%esp;\n"</span>::<span class="string">"a"</span>(my_stack+<span class="keyword">sizeof</span>(my_stack)-main_stack):<span class="string">"%esp"</span>); </span><br><span class="line">  tmain(); </span><br><span class="line">  __asm__(<span class="string">"movl (%%eax), %%esp;\n"</span>::<span class="string">"a"</span>(my_stack):<span class="string">"%esp"</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;【NOI2016】网格&quot;&gt;&lt;a href=&quot;#【NOI2016】网格&quot; class=&quot;headerlink&quot; title=&quot;【NOI2016】网格&quot;&gt;&lt;/a&gt;【NOI2016】网格&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/p&gt;
&lt;blockqu
      
    
    </summary>
    
      <category term="图论" scheme="http://yoursite.com/categories/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="Tarjan" scheme="http://yoursite.com/categories/%E5%9B%BE%E8%AE%BA/Tarjan/"/>
    
    
      <category term="Tarjan" scheme="http://yoursite.com/tags/Tarjan/"/>
    
  </entry>
  
  <entry>
    <title>NOI2016 优秀的拆分（二分+哈希+差分数组）</title>
    <link href="http://yoursite.com/2018/04/19/NOI2016-%E4%BC%98%E7%A7%80%E7%9A%84%E6%8B%86%E5%88%86%EF%BC%88%E4%BA%8C%E5%88%86-%E5%93%88%E5%B8%8C-%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84%EF%BC%89/"/>
    <id>http://yoursite.com/2018/04/19/NOI2016-优秀的拆分（二分-哈希-差分数组）/</id>
    <published>2018-04-19T08:30:54.000Z</published>
    <updated>2018-09-04T13:57:14.998Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【NOI2016】优秀的拆分"><a href="#【NOI2016】优秀的拆分" class="headerlink" title="【NOI2016】优秀的拆分"></a>【NOI2016】优秀的拆分</h1><p><strong>问题描述</strong></p><blockquote><p>如果一个字符串可以被拆分为 $\text{AABB}$ 的形式，其中 $\text{A}$ 和 $\text{B}$ 是任意<strong>非空</strong>字符串，则我们称该字符串的这种拆分是优秀的。<br>例如，对于字符串 $ \texttt{aabaabaa} $ ，如果令 $\text{A}=\texttt{aab}$，$\text{B}=\texttt{a}$，我们就找到了这个字符串拆分成 $\text{AABB}$ 的一种方式。</p><p>一个字符串可能没有优秀的拆分，也可能存在不止一种优秀的拆分。<br>比如我们令 $\text{A}=\texttt{a}$，$\text{B}=\texttt{baa}$，也可以用 $\text{AABB}$ 表示出上述字符串；但是，字符串 $\texttt{abaabaa}$ 就没有优秀的拆分。</p><p>现在给出一个长度为 $n$ 的字符串 $S$，我们需要求出，在它所有子串的所有拆分方式中，优秀拆分的总个数。这里的子串是指字符串中连续的一段。</p><p>以下事项需要注意：</p><ol><li>出现在不同位置的相同子串，我们认为是不同的子串，它们的优秀拆分均会被记入答案。</li><li>在一个拆分中，允许出现 $\text{A}=\text{B}$。例如 $\texttt{cccc}$ 存在拆分 $\text{A}=\text{B}=\texttt{c}$。</li><li>字符串本身也是它的一个子串。</li></ol></blockquote><p><strong>输入格式</strong></p><blockquote><p>每个输入文件包含多组数据。<br>输入文件的第一行只有一个整数 $T$，表示数据的组数。<br>接下来 $T$ 行，每行包含一个仅由英文小写字母构成的字符串 $S$，意义如题所述。</p></blockquote><p><strong>输出格式</strong></p><blockquote><p>输出 $T$ 行，每行包含一个整数，表示字符串 $S$ 所有子串的所有拆分中，总共有多少个是优秀的拆分。</p></blockquote><p><strong>样例输入</strong></p><blockquote><p>4<br>aabbbb<br>cccccc<br>aabaabaabaa<br>bbaabaababaaba</p></blockquote><p><strong>样例输出</strong></p><blockquote><p>3<br>5<br>4<br>7</p></blockquote><p><strong>提示</strong></p><blockquote><p>对于全部的测试点，$1 \leq T \leq 10, \ n \leq 30000$。</p></blockquote><hr><p>考虑枚举$AA$与$BB$的分界，令$A[i]$表示以$i$结尾的形如$AA$的串的个数，$B[i]$表示以$i$开头的形如$BB$的串的个数，那么$Ans=\sum A[i]\times B[i+1]$</p><p>那么考虑如何求出$A[i]$和$B[i]$，下面只讨论$A[i]$，$B[i]$同理。</p><p>考虑一个长为$2L$的形如$AA$的串，那么该串一定经过形如了$s[iL]$和$s[(i+1)L]$两个位置，我们考虑先枚举$L$，再枚举$pos=iL$，那么算出$s[iL],s[(i+1)L]$往前后分别能匹配多长，假设往前能匹配的长度位$pre（包含iL）$，往后能匹配的长度为$suf（包含iL）$，那么可以发现在区间$[(i+1)L-pre+L,(i+1)L+suf-1]$都可以作为一个$AA$串的结尾。因此只需要区间$+1$即可。这里可以用差分数组来做。</p><p>但是注意到直接这样算会出现重复，因此最后的区间左端点应该是$max{(i+1)L-pre+L,(i+1)L}$，区间右端点应该是$min{(i+1)L+suf-1,(i+2)L-1}$</p><p>最后，处理往前和往后的匹配长度时，可以用后缀自动机或后缀数组处理，也可以直接用哈希+二分解决，复杂度都差不多。</p><hr><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 30005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*p11,*p22;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC (p11==p22&amp;&amp;(p22=(p11=buf)+fread(buf,1,1000000,stdin),p11==p22)?0:*p11++)</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _R(<span class="keyword">int</span> &amp;x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> t=GC;</span><br><span class="line"><span class="keyword">while</span>(t&lt;<span class="number">48</span>||t&gt;<span class="number">57</span>)t=GC;</span><br><span class="line"><span class="keyword">for</span>(x=<span class="number">0</span>;t&gt;<span class="number">47</span>&amp;&amp;t&lt;<span class="number">58</span>;t=GC)x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+t<span class="number">-48</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">int</span> _S(<span class="keyword">char</span> *c)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> *t=c,ch=GC;</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">'a'</span>||ch&gt;<span class="string">'z'</span>)ch=GC;</span><br><span class="line"><span class="keyword">for</span>(;ch&gt;=<span class="string">'a'</span>&amp;&amp;ch&lt;=<span class="string">'z'</span>;ch=GC)*t++=ch;</span><br><span class="line">*t=<span class="number">0</span>;<span class="keyword">return</span> t-c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> ull p1=<span class="number">1234321237</span>;</span><br><span class="line"><span class="keyword">const</span> ull p2=<span class="number">1313131312</span>;</span><br><span class="line">ull Aash[N],Bash[N],Pow1[N],Pow2[N];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans;</span><br><span class="line"><span class="keyword">int</span> T,n,A[N],B[N];</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">fill(Aash,Aash+n+<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">fill(Bash,Bash+n+<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">fill(A,A+n+<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">fill(B,B+n+<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x1,<span class="keyword">int</span> y1,<span class="keyword">int</span> x2,<span class="keyword">int</span> y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ull x=Aash[y1]-Aash[x1<span class="number">-1</span>]*Pow1[y1-x1+<span class="number">1</span>];</span><br><span class="line">ull y=Aash[y2]-Aash[x2<span class="number">-1</span>]*Pow1[y2-x2+<span class="number">1</span>];</span><br><span class="line">ull p=Bash[y1]-Bash[x1<span class="number">-1</span>]*Pow2[y1-x1+<span class="number">1</span>];</span><br><span class="line">ull q=Bash[y2]-Bash[x2<span class="number">-1</span>]*Pow2[y2-x2+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> x==y&amp;&amp;p==q;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Gpre</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l=<span class="number">1</span>,r=min(x,L),mid;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">&#123;</span><br><span class="line">mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(check(x-mid+<span class="number">1</span>,x,y-mid+<span class="number">1</span>,y))l=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Gsuf</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l=<span class="number">1</span>,r=min(n-y+<span class="number">1</span>,L),mid;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">&#123;</span><br><span class="line">mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(check(x,x+mid<span class="number">-1</span>,y,y+mid<span class="number">-1</span>))l=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Get</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k,pre,suf,l,r;</span><br><span class="line">pre=Gpre(x,y,L);</span><br><span class="line">suf=Gsuf(x,y,L);</span><br><span class="line">l=max(y-pre+L,y);</span><br><span class="line">r=min(y+suf<span class="number">-1</span>,y+L<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span>(l&lt;=r)</span><br><span class="line">&#123;</span><br><span class="line">A[l]++;A[r+<span class="number">1</span>]--;</span><br><span class="line">B[l-(L&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>]++;</span><br><span class="line">B[r-(L&lt;&lt;<span class="number">1</span>)+<span class="number">2</span>]--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,k,x,y;</span><br><span class="line">_R(T);Pow1[<span class="number">0</span>]=Pow2[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">n=_S(s+<span class="number">1</span>);Init();ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)Pow1[i]=Pow1[i<span class="number">-1</span>]*p1;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)Pow2[i]=Pow2[i<span class="number">-1</span>]*p2;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)Aash[i]=Aash[i<span class="number">-1</span>]*p1+s[i];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)Bash[i]=Bash[i<span class="number">-1</span>]*p2+s[i];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=(n&gt;&gt;<span class="number">1</span>);i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j+i&lt;=n;j+=i)<span class="keyword">if</span>(s[j]==s[j+i])Get(j,j+i,i);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)A[i]+=A[i<span class="number">-1</span>],B[i]+=B[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)ans+=<span class="number">1l</span>l*A[i]*B[i+<span class="number">1</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;【NOI2016】优秀的拆分&quot;&gt;&lt;a href=&quot;#【NOI2016】优秀的拆分&quot; class=&quot;headerlink&quot; title=&quot;【NOI2016】优秀的拆分&quot;&gt;&lt;/a&gt;【NOI2016】优秀的拆分&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;
      
    
    </summary>
    
      <category term="字符串" scheme="http://yoursite.com/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="分治法" scheme="http://yoursite.com/categories/%E5%88%86%E6%B2%BB%E6%B3%95/"/>
    
      <category term="杂学" scheme="http://yoursite.com/categories/%E6%9D%82%E5%AD%A6/"/>
    
      <category term="二分答案" scheme="http://yoursite.com/categories/%E5%88%86%E6%B2%BB%E6%B3%95/%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88/"/>
    
      <category term="哈希" scheme="http://yoursite.com/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%93%88%E5%B8%8C/"/>
    
      <category term="差分数组" scheme="http://yoursite.com/categories/%E6%9D%82%E5%AD%A6/%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84/"/>
    
    
      <category term="差分" scheme="http://yoursite.com/tags/%E5%B7%AE%E5%88%86/"/>
    
      <category term="二分答案" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88/"/>
    
      <category term="哈希" scheme="http://yoursite.com/tags/%E5%93%88%E5%B8%8C/"/>
    
  </entry>
  
  <entry>
    <title>NOI2017 蔬菜（贪心+并查集+堆）</title>
    <link href="http://yoursite.com/2018/04/19/NOI2017-%E8%94%AC%E8%8F%9C%EF%BC%88%E8%B4%AA%E5%BF%83-%E5%B9%B6%E6%9F%A5%E9%9B%86-%E5%A0%86%EF%BC%89/"/>
    <id>http://yoursite.com/2018/04/19/NOI2017-蔬菜（贪心-并查集-堆）/</id>
    <published>2018-04-19T08:10:16.000Z</published>
    <updated>2018-09-04T13:57:14.998Z</updated>
    
    <content type="html"><![CDATA[<h1 id="「NOI2017」蔬菜"><a href="#「NOI2017」蔬菜" class="headerlink" title="「NOI2017」蔬菜"></a>「NOI2017」蔬菜</h1><p><strong>问题描述</strong></p><blockquote><p>小 N 是蔬菜仓库的管理员，负责设计蔬菜的销售方案。<br>在蔬菜仓库中，共存放有 $n$ 种蔬菜，小 N 需要根据不同蔬菜的特性，综合考虑各方面因素，设计合理的销售方案，以获得最多的收益。<br>在计算销售蔬菜的收益时，每销售一个单位第 $i$ 种蔬菜，就可以获得 $a_i$ 的收益。<br>特别地，由于政策鼓励商家进行多样化销售，第一次销售第 $i$ 种蔬菜时，还会额外得到 $s_i$ 的额外收益。<br>在经营开始时，第 $i$ 种蔬菜的库存为 $c_i$ 个单位。<br>然而，蔬菜的保鲜时间非常有限，一旦变质就不能进行销售，不过聪明的小 N 已 经计算出了每个单位蔬菜变质的时间：对于第 $i$ 种蔬菜，存在保鲜值 $x_i$，每天结束时会 有 $x_i$ 个单位的蔬菜变质，直到所有蔬菜都变质。（注意：每一单位蔬菜的变质时间是固 定的，不随销售发生变化）<br>形式化地：对于所有的满足条件 $d\times x_i \leq c_i$ 的正整数 $d$ ，有 $x_i$ 个单位的蔬菜将在 第 $d$ 天结束时变质。<br>特别地，若 $(d−1)\times x_i \leq c_i &lt; d\times x_i$ ，则有 $c_i−(d−1)\times x_i$ 单位的蔬菜将在第 $d$ 天结束时变质。<br>注意，当 $x_i = 0$ 时，意味着这种蔬菜不会变质。<br>同时，每天销售的蔬菜 . 总量也是有限的，最多不能超过 $m$ 个单位。<br>现在，小 N 有 $k$ 个问题，想请你帮忙算一算。每个问题的形式都是：对于已知的 $p_j$，如果需要销售 $p_j$ 天，最多能获得多少收益？  </p></blockquote><p><strong>输入格式</strong></p><blockquote><p>第一行包含三个正整数 $n,m,k$，分别表示蔬菜的种类数目、每天能售出蔬菜总量上限、小 N 提出的问题的个数。<br>接下来 $n$ 行，每行输入四个非负整数，描述一种蔬菜的特点，依次为 $a_i,s_i,c_i,x_i$ ， 意义如上文所述。<br>接下来 $k$ 行，每行输入一个非负整数 $p_j$ ，意义如上文所述。</p></blockquote><p><strong>输出格式</strong></p><blockquote><p>输出 $k$ 行，每行包含一个整数，第 $i$ 行的数表示第 $i$ 个问题的答案。</p></blockquote><p><strong>样例输入</strong></p><blockquote><p>2 3 2<br>3 3 3 3<br>2 5 8 3<br>1<br>3</p></blockquote><p><strong>样例输出</strong></p><blockquote><p>16<br>27</p></blockquote><p><strong>提示</strong></p><blockquote><p>$n \leq 10^5, m \leq 10, p_j \leq 10^5, 0 &lt; a_i,c_i \leq 10^9 , 0 \leq s_i,x_i \leq10^9 $ </p></blockquote><hr><p>首先这题容易想到费用流，即将每天看成一个点，从源点往每天连边，容量为$m$，然后对每种蔬菜，将他拆成$\lceil \frac{C}{x}\rceil$天卖出，每天卖$x$，然后最后一天处理一下$a_i+s_i$即可。</p><p>然而费用流显然是过不了大数据的。正解考虑贪心。</p><p>我们考虑一个朴素的贪心，如果能卖菜的天数确定，那么将蔬菜的权值从大到小排序，用堆维护，然后一个一个卖，然后显然如果要卖这个蔬菜，就应该安排到他最后能卖的一天卖，这个时间由$\lceil \frac{C}{x}\rceil$给出，那么我们就将他安排一单位到这一天卖，其他的放回堆中。如果这一天已经卖了$m$个，那就要往前找到第一个没有卖到$m$个的位置。这个可以用并查集来实现，如果某一天已经卖了$m$个，就将他和前一天合并。这样并查集的根就是他往前第一个还能卖菜的位置。</p><p>然后我们考虑处理多组询问，实际上，当我们求出了$p$的卖菜方案$S_p$之后，$p-1$的卖菜方案$S_{p-1}$一定是$S_p$的一个子集，因为$S_p$中的所有元素都可以在前$p-1$天卖出。因此只需要从$S_p$中取$(p-1)m$个元素就行了。</p><p>因此我们只需要处理出$p_{max}$的答案，然后记录下$ans[i]$表示选$i$个蔬菜的最优答案就行了。</p><hr><p><strong>代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1</span>&lt;&lt;<span class="number">20</span>],*p1,*p2;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC (p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,1,1000000,stdin),p1==p2)?0:*p1++)</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _R(<span class="keyword">int</span> &amp;x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> t=GC;</span><br><span class="line"><span class="keyword">while</span>(t&lt;<span class="number">48</span>||t&gt;<span class="number">57</span>)t=GC;</span><br><span class="line"><span class="keyword">for</span>(x=<span class="number">0</span>;t&gt;<span class="number">47</span>&amp;&amp;t&lt;<span class="number">58</span>;t=GC)x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+t<span class="number">-48</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span><span class="keyword">int</span> val,id;&#125;;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(node a,node b)&#123;<span class="keyword">return</span> a.val&lt;b.val;&#125;</span><br><span class="line">priority_queue&lt;node&gt;Q;</span><br><span class="line"><span class="keyword">int</span> sum,n,m,q,a[N],s[N],c[N],x[N],fa[N],cnt[N],qry[N],Max;</span><br><span class="line">ll ans[N*<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GF</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x==fa[x]?x:fa[x]=GF(fa[x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;_R(n);_R(m);_R(q);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">_R(a[i]);_R(s[i]);_R(c[i]);_R(x[i]);</span><br><span class="line">Q.push((node)&#123;a[i]+s[i],i&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">&#123;</span><br><span class="line">_R(qry[i]);</span><br><span class="line">Max=max(Max,qry[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=Max;i++)fa[i]=i,cnt[i]=m;</span><br><span class="line"><span class="keyword">while</span>(Q.size())</span><br><span class="line">&#123;</span><br><span class="line">node tmp=Q.top();Q.pop();</span><br><span class="line"><span class="keyword">int</span> t=x[tmp.id]?(c[tmp.id]<span class="number">-1</span>)/x[tmp.id]+<span class="number">1</span>:Max;</span><br><span class="line"><span class="keyword">if</span>(t&gt;Max)t=Max;</span><br><span class="line">t=GF(t);<span class="keyword">if</span>(!cnt[t])<span class="keyword">continue</span>;</span><br><span class="line">cnt[t]--;sum++;c[tmp.id]--;</span><br><span class="line"><span class="keyword">if</span>(!cnt[t])fa[t]=fa[t<span class="number">-1</span>];</span><br><span class="line">ans[sum]=ans[sum<span class="number">-1</span>]+tmp.val;</span><br><span class="line"><span class="keyword">if</span>(c[tmp.id])Q.push((node)&#123;a[tmp.id],tmp.id&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=q;i++)<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans[min(sum,qry[i]*m)]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;「NOI2017」蔬菜&quot;&gt;&lt;a href=&quot;#「NOI2017」蔬菜&quot; class=&quot;headerlink&quot; title=&quot;「NOI2017」蔬菜&quot;&gt;&lt;/a&gt;「NOI2017」蔬菜&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/p&gt;
&lt;blockqu
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="贪心" scheme="http://yoursite.com/categories/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="堆" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/"/>
    
      <category term="并查集" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
    
      <category term="贪心" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="堆" scheme="http://yoursite.com/tags/%E5%A0%86/"/>
    
      <category term="并查集" scheme="http://yoursite.com/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
</feed>
